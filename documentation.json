{
    "pipes": [],
    "interfaces": [
        {
            "name": "AuthOptional",
            "id": "interface-AuthOptional-f3a39eb75e7465ced3048fe21df6bf8d8b7107ffa6f4f82285763523dc3acc341182d9fefdb33bc080d1a0cb31cd4fcb70a4223909c1a364f74560f0cc486839",
            "file": "projects/sistema/src/app/core/domain/auth.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AuthRequired {\r\n    correo: string;\r\n    password: string;\r\n}\r\n\r\nexport interface AuthOptional {\r\n    recaptchaReactive: string;\r\n}\r\n\r\nexport type AuthProperties = Required<AuthRequired> & Required<AuthOptional>\r\n\r\nexport class Auth {\r\n    private readonly correo: string;\r\n    private readonly password: string;\r\n    private readonly recaptchaReactive: string;\r\n\r\n    constructor(properties: AuthProperties) {\r\n        Object.assign(this, properties);\r\n    }\r\n\r\n    properties(): AuthProperties {\r\n        return {\r\n            correo: this.correo,\r\n            password: this.password,\r\n            recaptchaReactive: this.recaptchaReactive\r\n        }\r\n    }\r\n}",
            "properties": [
                {
                    "name": "recaptchaReactive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AuthRepository",
            "id": "interface-AuthRepository-e753b1886f851d6f7213182d6b0d0fb6451fd43908c3e8664559604a8390c69beaf0e1cb632864c86975bab1da9216b9691b552f046eca2ce644fad6f280f704",
            "file": "projects/sistema/src/app/core/domain/auth.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from \"rxjs\";\r\nimport { Auth } from \"./auth\";\r\nimport { ITokens } from \"./tokens.interface\";\r\n\r\nexport interface AuthRepository {\r\n    login(auth: Auth): Observable<any>;\r\n    getNewAccessToken(refreshToken: string): Observable<ITokens>;\r\n}",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "getNewAccessToken",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ITokens>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "auth",
                            "type": "Auth",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "Auth",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "AuthRequired",
            "id": "interface-AuthRequired-f3a39eb75e7465ced3048fe21df6bf8d8b7107ffa6f4f82285763523dc3acc341182d9fefdb33bc080d1a0cb31cd4fcb70a4223909c1a364f74560f0cc486839",
            "file": "projects/sistema/src/app/core/domain/auth.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AuthRequired {\r\n    correo: string;\r\n    password: string;\r\n}\r\n\r\nexport interface AuthOptional {\r\n    recaptchaReactive: string;\r\n}\r\n\r\nexport type AuthProperties = Required<AuthRequired> & Required<AuthOptional>\r\n\r\nexport class Auth {\r\n    private readonly correo: string;\r\n    private readonly password: string;\r\n    private readonly recaptchaReactive: string;\r\n\r\n    constructor(properties: AuthProperties) {\r\n        Object.assign(this, properties);\r\n    }\r\n\r\n    properties(): AuthProperties {\r\n        return {\r\n            correo: this.correo,\r\n            password: this.password,\r\n            recaptchaReactive: this.recaptchaReactive\r\n        }\r\n    }\r\n}",
            "properties": [
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Base",
            "id": "interface-Base-97d84f2143255940601504bfe73a9b7790866de24da7aa9c8b3c43054b53ac21e5d84ffa7b45fe91a6cb8b933fc259f0095f810908e66fa81ee910fcc1d35ace",
            "file": "projects/sistema/src/app/shared/domain/base.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from \"rxjs\"\r\n\r\nexport interface Base<Entity> {\r\n\r\n    insert(user: Entity): Observable<any>\r\n\r\n    list(): Observable<any>\r\n\r\n    listOne(id: number): Observable<any>\r\n\r\n    update(id: number, user: Entity): Observable<any>\r\n\r\n    delete(id: number): Observable<any>\r\n\r\n    page(page: number): Observable<any>\r\n}",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "user",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "CovidModel",
            "id": "interface-CovidModel-16341c67806498e5ee3ef12ce993586ea1127ced369687bb139549041893a08a89aeb27d1f58048fa58e95236ca4be59706ad7098c5cb8525452966ac8758987",
            "file": "projects/sistema/src/app/dashboard/domain/covid.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CovidModel {\r\n    provinceState?: string\r\n    countryRegion: string\r\n    lastUpdate: number\r\n    lat?: number\r\n    long?: number\r\n    confirmed: number\r\n    deaths: number\r\n    recovered: any\r\n    active: any\r\n    admin2?: string\r\n    fips?: string\r\n    combinedKey: string\r\n    incidentRate?: number\r\n    peopleTested: any\r\n    peopleHospitalized: any\r\n    uid: number\r\n    iso3?: string\r\n    cases28Days?: number\r\n    deaths28Days?: number\r\n    iso2?: string\r\n}\r\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "admin2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "cases28Days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "combinedKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "confirmed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "countryRegion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "deaths",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "deaths28Days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "fips",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "incidentRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "iso2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "iso3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "lastUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "long",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "peopleHospitalized",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "peopleTested",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "provinceState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "recovered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "uid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CovidRepository",
            "id": "interface-CovidRepository-3712a0885407a6ed265fb65675f64939f0e987a8f464dc196db49d273d6c583a42aabb66e0a343e456d9a2efd83aff1c1105fc898ff3eb34c12072c273896fad",
            "file": "projects/sistema/src/app/dashboard/domain/covid.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from \"rxjs\";\r\nimport { CovidModel } from \"./covid.model\";\r\n\r\nexport interface CovidRepository {\r\n    getCovidData(): Observable<CovidModel[]>;\r\n}",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "getCovidData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CovidModel[]>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "DriverOpcional",
            "id": "interface-DriverOpcional-8f3f16784cffe138526b69e9335327065708ca4415ca23db543d947379a0b0902babd710afb15626a38065c44deb88a9cd57a1aff85f9728fe7da6f81c969495",
            "file": "projects/sistema/src/app/driver/domain/driver.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DriverRequired {\r\n    nombre: string;\r\n}\r\n\r\nexport interface DriverOpcional {\r\n    id: number;\r\n    activo: boolean\r\n}\r\n\r\nexport type DriverProperties = Required<DriverRequired> & Partial<DriverOpcional>\r\n\r\nexport type DriverUpdate = Partial<{\r\n    nombre: string;\r\n}>\r\n\r\nexport class Driver {\r\n    private readonly id: number;\r\n    private nombre: string;\r\n    private activo: boolean;\r\n\r\n    constructor(properties: DriverProperties) {\r\n        this.activo = true;\r\n        Object.assign(this, properties);\r\n    }\r\n\r\n    properties(): DriverProperties {\r\n        return {\r\n            id: this.id,\r\n            nombre: this.nombre,\r\n            activo: this.activo\r\n        }\r\n    }\r\n\r\n    update(fields: DriverUpdate) {\r\n        Object.assign(this, fields);\r\n    }\r\n\r\n    delete() {\r\n        this.activo = false;\r\n    }\r\n}",
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DriverRepository",
            "id": "interface-DriverRepository-f38d33bffd16472f422c2071b01b1a3792887ddf41d33da01d3879845734e9a17c747df659a121af789ccb501d3a62727ea19f3d8a72cf0586df01f09f61ba2d",
            "file": "projects/sistema/src/app/driver/domain/driver.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Base } from \"../../shared/domain/base.interface\";\r\nimport { Driver } from \"./driver\";\r\n\r\nexport interface DriverRepository extends Base<Driver> { }",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Base"
        },
        {
            "name": "DriverRequired",
            "id": "interface-DriverRequired-8f3f16784cffe138526b69e9335327065708ca4415ca23db543d947379a0b0902babd710afb15626a38065c44deb88a9cd57a1aff85f9728fe7da6f81c969495",
            "file": "projects/sistema/src/app/driver/domain/driver.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DriverRequired {\r\n    nombre: string;\r\n}\r\n\r\nexport interface DriverOpcional {\r\n    id: number;\r\n    activo: boolean\r\n}\r\n\r\nexport type DriverProperties = Required<DriverRequired> & Partial<DriverOpcional>\r\n\r\nexport type DriverUpdate = Partial<{\r\n    nombre: string;\r\n}>\r\n\r\nexport class Driver {\r\n    private readonly id: number;\r\n    private nombre: string;\r\n    private activo: boolean;\r\n\r\n    constructor(properties: DriverProperties) {\r\n        this.activo = true;\r\n        Object.assign(this, properties);\r\n    }\r\n\r\n    properties(): DriverProperties {\r\n        return {\r\n            id: this.id,\r\n            nombre: this.nombre,\r\n            activo: this.activo\r\n        }\r\n    }\r\n\r\n    update(fields: DriverUpdate) {\r\n        Object.assign(this, fields);\r\n    }\r\n\r\n    delete() {\r\n        this.activo = false;\r\n    }\r\n}",
            "properties": [
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Graph",
            "id": "interface-Graph-de602675312d45860a35c9c4be2faa79ff41e3a7dae601b946b9c7a114bf9dd8a101a1890868b23682a70826401ffcb89b3e97a6f4cc4cc302ae9fb4e486adeb",
            "file": "projects/sistema/src/app/dashboard/domain/graph.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Graph {\r\n    name: string;\r\n    value: number;\r\n}",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IApplication",
            "id": "interface-IApplication-eba07651884bfa2098da7c34caddc433e9c37a162c04912662d5f14b8f49806feadd5fd03bc594ad1e9545a2573b081c91de51df2062d36a40cfaf457bb10244",
            "file": "projects/sistema/src/app/shared/application/interface-application.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from \"rxjs\"\r\n\r\nexport interface IApplication<Entity> {\r\n\r\n    insert(entity: Entity): Observable<any>\r\n\r\n    list(): Observable<any>\r\n\r\n    listOne(id: number): Observable<any>\r\n\r\n    update(id: number, entity: Entity): Observable<any>\r\n\r\n    delete(id: number): Observable<any>\r\n\r\n    page(page: number): Observable<any>\r\n}",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Icon",
            "id": "interface-Icon-a281b7858545d178c4fa967b0b2c016a630543d6efe332b5b210d7bb78d5ffd386a8ce45e9b6d8f9af581ec544cd4e63ab51813a15fea121486913a74ed8f56f",
            "file": "projects/sistema/src/app/shared/service/icon.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\ninterface Icon {\n  name: string;\n  path: string\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IconService {\n\n\n  private listIcons: Icon[] = [\n    { name: \"diver\", path: \"../../assets/icons/driver2.svg\" },\n    { name: \"history\", path: \"../../assets/icons/historia.svg\" },\n    { name: \"medic\", path: \"../../assets/icons/medico.svg\" },\n    { name: \"user\", path: \"../../assets/icons/user2.svg\" },\n    { name: \"dashboard\", path: \"../../assets/icons/tablero.svg\" },\n    { name: \"logo\", path: \"../../assets/icons/ambulance2.svg\" },\n    { name: \"excel\", path: \"../../assets/icons/excel.svg\" },\n    { name: \"pdf\", path: \"../../assets/icons/pdf.svg\" },\n  ];\n\n  constructor(private matIconRegistry: MatIconRegistry, private domSanitizer: DomSanitizer) {\n    for (let icon of this.listIcons) {\n      this.matIconRegistry.addSvgIcon(icon.name, this.domSanitizer.bypassSecurityTrustResourceUrl(icon.path));\n    }\n  }\n\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILayout",
            "id": "interface-ILayout-275d10e56a573a8817ca403654c2f7b441fa3151c0078f1f30431c3a069c46840a897e2a016216d1ca0a58c05f93ce4ecf2ec3dc79014c53b8e9b32a741ced31",
            "file": "projects/sistema/src/app/config/injections/layout/interface/layout.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ILayout {\r\n    hideHeader: boolean;\r\n    hideMenu: boolean;\r\n}",
            "properties": [
                {
                    "name": "hideHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "hideMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMedicApplication",
            "id": "interface-IMedicApplication-263b47a685dff095fe00eee216e6d1b2a7fbe366da33458e9b3aa3ccdd3e1966b324e436e2e5c6b6a68a9c1551f850fcdd09203b0a95fc96eb7091bf855f1472",
            "file": "projects/sistema/src/app/driver/application/driver.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IApplication } from \"../../shared/application/interface-application\";\r\nimport { Driver } from \"../domain/driver\";\r\n\r\nexport interface IMedicApplication extends IApplication<Driver> {\r\n}",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "IApplication"
        },
        {
            "name": "IMedicApplication",
            "id": "interface-IMedicApplication-76dff9d1003a5e7363b4918c104f7fe0f014a1a7b75e334be5ca627b71917c94d43f566ae69d3ef89765287809092871f52606133e57959ea506c41d502b0862-1",
            "file": "projects/sistema/src/app/medic/application/medic.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IApplication } from \"../../shared/application/interface-application\";\r\nimport { Medic } from \"../domain/medic\";\r\n\r\nexport interface IMedicApplication extends IApplication<Medic> {\r\n}",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "IApplication",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IMedicApplication-1"
        },
        {
            "name": "IResultPage",
            "id": "interface-IResultPage-2f013f7e0003f160860486788fa381aad37f0cb4c6529c8a8ae7237f02c509355b6ccded86e4522f3dc49733051b6493a51fae0c6181672313e5561f37c0d4dd",
            "file": "projects/sistema/src/app/shared/interface/result-page.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IResultPage<Entity> {\r\n    records: Entity[];\r\n    totalRecords: number;\r\n}",
            "properties": [
                {
                    "name": "records",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Entity[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "totalRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IRole",
            "id": "interface-IRole-579eb89cb5c04bf249a42c87eefce86b8e64cd8b705a0e7dbda1a304db02c51ca0f6cbeed2393854a066ca1ed5b36df37f3872889aa7a688a3fec685a782dc35",
            "file": "projects/sistema/src/app/roles/application/role.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IApplication } from \"../../shared/application/interface-application\";\r\nimport { Role } from \"../domain/role\";\r\n\r\nexport interface IRole extends IApplication<Role> { }",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "IApplication"
        },
        {
            "name": "ITokens",
            "id": "interface-ITokens-e4a902a78c0f8a8ea962010ec0ecd1941b6a23e7a828af38ff0551ba6c734a6ed3fcc8ef83f51f34e35aa0abe1ff7f3a17280b738449c18b877be6310310ec4e",
            "file": "projects/sistema/src/app/core/domain/tokens.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITokens {\r\n    accessToken: string;\r\n    refreshToken: string;\r\n}",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MedicOpcional",
            "id": "interface-MedicOpcional-a0c8ef8bc080ef5a0208f2a96ca4d437c0b810f53cfe2bcd5e52f6e38d06a6efb3e46d072f8479671a46cbec35fa85cf2c616df9cac097ff230d8e2ef2701cb3",
            "file": "projects/sistema/src/app/medic/domain/medic.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MedicRequired {\r\n    nombre: string;\r\n    apellido: string;\r\n    segundo_nombre: string;\r\n    cmp: string;\r\n    correo: string;\r\n    dni: string\r\n    foto: string\r\n}\r\n\r\nexport interface MedicOpcional {\r\n    id: number;\r\n    activo: boolean\r\n}\r\n\r\nexport type MedicProperties = Required<MedicRequired> & Partial<MedicOpcional>\r\n\r\nexport type MedicUpdate = Partial<{\r\n    nombre: string;\r\n    apellido: string;\r\n    segundo_nombre: string;\r\n    cmp: string;\r\n    correo: string;\r\n    dni: string\r\n    foto: string\r\n}>\r\n\r\nexport class Medic {\r\n    private readonly id: number;\r\n    private nombre: string;\r\n    private apellido: string;\r\n    private segundo_nombre: string;\r\n    private cmp: string;\r\n    private correo: string;\r\n    private dni: string;\r\n    private foto: string;\r\n    private activo: boolean;\r\n\r\n    constructor(properties: MedicProperties) {\r\n        this.activo = true;\r\n        Object.assign(this, properties);\r\n    }\r\n\r\n    properties(): MedicProperties {\r\n        return {\r\n            id: this.id,\r\n            nombre: this.nombre,\r\n            apellido: this.apellido,\r\n            segundo_nombre: this.segundo_nombre,\r\n            cmp: this.cmp,\r\n            correo: this.correo,\r\n            dni: this.dni,\r\n            foto: this.foto,\r\n            activo: this.activo\r\n        }\r\n    }\r\n\r\n    update(fields: MedicUpdate) {\r\n        Object.assign(this, fields);\r\n    }\r\n\r\n    delete() {\r\n        this.activo = false;\r\n    }\r\n}",
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MedicRepository",
            "id": "interface-MedicRepository-8d3cbac55f751aff4ef26969f9a8802357b00ddf459bf4e84f29bf7622cbc702905a5d9ad5bbb11a34ad0feba82017cb25a0ce05e2d4075e1a1e44d292ae9ecf",
            "file": "projects/sistema/src/app/medic/domain/medic.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Base } from \"../../shared/domain/base.interface\";\r\nimport { Medic } from \"./medic\";\r\n\r\nexport interface MedicRepository extends Base<Medic> { }",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Base"
        },
        {
            "name": "MedicRequired",
            "id": "interface-MedicRequired-a0c8ef8bc080ef5a0208f2a96ca4d437c0b810f53cfe2bcd5e52f6e38d06a6efb3e46d072f8479671a46cbec35fa85cf2c616df9cac097ff230d8e2ef2701cb3",
            "file": "projects/sistema/src/app/medic/domain/medic.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MedicRequired {\r\n    nombre: string;\r\n    apellido: string;\r\n    segundo_nombre: string;\r\n    cmp: string;\r\n    correo: string;\r\n    dni: string\r\n    foto: string\r\n}\r\n\r\nexport interface MedicOpcional {\r\n    id: number;\r\n    activo: boolean\r\n}\r\n\r\nexport type MedicProperties = Required<MedicRequired> & Partial<MedicOpcional>\r\n\r\nexport type MedicUpdate = Partial<{\r\n    nombre: string;\r\n    apellido: string;\r\n    segundo_nombre: string;\r\n    cmp: string;\r\n    correo: string;\r\n    dni: string\r\n    foto: string\r\n}>\r\n\r\nexport class Medic {\r\n    private readonly id: number;\r\n    private nombre: string;\r\n    private apellido: string;\r\n    private segundo_nombre: string;\r\n    private cmp: string;\r\n    private correo: string;\r\n    private dni: string;\r\n    private foto: string;\r\n    private activo: boolean;\r\n\r\n    constructor(properties: MedicProperties) {\r\n        this.activo = true;\r\n        Object.assign(this, properties);\r\n    }\r\n\r\n    properties(): MedicProperties {\r\n        return {\r\n            id: this.id,\r\n            nombre: this.nombre,\r\n            apellido: this.apellido,\r\n            segundo_nombre: this.segundo_nombre,\r\n            cmp: this.cmp,\r\n            correo: this.correo,\r\n            dni: this.dni,\r\n            foto: this.foto,\r\n            activo: this.activo\r\n        }\r\n    }\r\n\r\n    update(fields: MedicUpdate) {\r\n        Object.assign(this, fields);\r\n    }\r\n\r\n    delete() {\r\n        this.activo = false;\r\n    }\r\n}",
            "properties": [
                {
                    "name": "apellido",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "cmp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dni",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "foto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "segundo_nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Menu",
            "id": "interface-Menu-0a2602eb9c403b9712f76232256ffcaefc2ed5cdd01cda0e7bbd42b01fe676bc8f634fe1669e137177ca0f83f653e047552fe392dd8a598086b70d6dec96ec64",
            "file": "projects/sistema/src/app/shared/service/menu.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport interface Menu {\n  title: string;\n  url: string;\n  icon: string;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MenuService {\n\n  private menu: Menu[];\n\n  constructor() {\n    this.menu = [\n      { title: 'Dashboard', url: '/dashboard', icon: 'dashboard' },\n      { title: 'User', url: '/user', icon: 'user' },\n      { title: 'Medic', url: '/medic', icon: 'medic' },\n      { title: 'Driver', url: '/driver', icon: 'diver' },\n      { title: 'History', url: '/history', icon: 'history' },\n    ];\n  }\n\n  getItems(): Menu[] {\n    return [...this.menu];\n    //return Object.assign([], this.menu)\n  }\n\n  getDataPath(currentPath: string): Menu {\n    const menu = this.menu.find((el: Menu) => el.url === currentPath);\n    return menu as Menu;\n    // return Object.assign([], this.menu);\n  }\n\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MetaColumn",
            "id": "interface-MetaColumn-f89d802d42da85359ce9f05f1c5caa616c13dc3e1df857fbc3544558b5de75962551f7c697431befcafd2e030632e2da4d0124799c4de3ec1db3873781956dc2",
            "file": "projects/sistema/src/app/shared/interfaces/metacolumn.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MetaColumn {\r\n    title: string;\r\n    field: string\r\n}",
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RoleEssential",
            "id": "interface-RoleEssential-80be255597baff1a70a7824eeb0e29fab93e9fe0b1aa2480e212b6ca82ce9d2c38e844016fb3891ca68f352e5dd571621b14fe163de3db580e89c79e0d29f17c",
            "file": "projects/sistema/src/app/roles/domain/role.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RoleEssential {\r\n    readonly rol: string;\r\n}\r\n\r\nexport interface RoleOptional {\r\n    readonly id: number;\r\n}\r\n\r\nexport type RoleProperties = Required<RoleEssential> & Partial<RoleOptional>\r\n\r\nexport type RoleUpdate = Partial<{ role: string }>\r\n\r\nexport class Role {\r\n    private readonly id: number;\r\n    private rol: string;\r\n\r\n    constructor(properties: RoleProperties) {\r\n        Object.assign(this, properties);\r\n    }\r\n\r\n    properties(): RoleProperties {\r\n        return {\r\n            id: this.id,\r\n            rol: this.rol\r\n        }\r\n\r\n    }\r\n}",
            "properties": [
                {
                    "name": "rol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RoleOptional",
            "id": "interface-RoleOptional-80be255597baff1a70a7824eeb0e29fab93e9fe0b1aa2480e212b6ca82ce9d2c38e844016fb3891ca68f352e5dd571621b14fe163de3db580e89c79e0d29f17c",
            "file": "projects/sistema/src/app/roles/domain/role.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RoleEssential {\r\n    readonly rol: string;\r\n}\r\n\r\nexport interface RoleOptional {\r\n    readonly id: number;\r\n}\r\n\r\nexport type RoleProperties = Required<RoleEssential> & Partial<RoleOptional>\r\n\r\nexport type RoleUpdate = Partial<{ role: string }>\r\n\r\nexport class Role {\r\n    private readonly id: number;\r\n    private rol: string;\r\n\r\n    constructor(properties: RoleProperties) {\r\n        Object.assign(this, properties);\r\n    }\r\n\r\n    properties(): RoleProperties {\r\n        return {\r\n            id: this.id,\r\n            rol: this.rol\r\n        }\r\n\r\n    }\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RoleRepository",
            "id": "interface-RoleRepository-3a55273f00a71728073bb21516d554f5a51139b9f213503b8da84d125fba3073bcdaaf0955026bdd475b7b3d190e711c56d2f545aeb1e1f2f2d6b7de8b44d2e9",
            "file": "projects/sistema/src/app/roles/domain/role.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Base } from \"../../shared/domain/base.interface\";\r\nimport { Role } from \"./role\";\r\n\r\nexport interface RoleRepository extends Base<Role> { }",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Base"
        },
        {
            "name": "SocketRepository",
            "id": "interface-SocketRepository-87782854f7cd548d7b3d4fd9947665c2b3176f628e228c288ff3bbd0347b2570fd9e5772a0e12143bb2ffd1c94d1b1f62ecdc5412a0c87eca53f770bed9e204f",
            "file": "projects/sistema/src/app/dashboard/domain/socket.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { Graph } from './graph.interface';\r\n\r\nexport interface SocketRepository {\r\n    listen(eventName: string): Observable<Graph[]>;\r\n}",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Graph[]>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "StorageRepository",
            "id": "interface-StorageRepository-d3b3b39584d90b0674f0e133391c329bc13ca29aa2948f345d77e621fe25a9c8786f6515bc5cd4ed56becf0c00c7a6f07dda2b4dc465d4f95044e832c47fd5f7",
            "file": "projects/sistema/src/app/core/domain/storage.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StorageRepository {\r\n    setStorage(property: string, value: string): void\r\n    getStorage(property: string): string | null\r\n    clear(): void\r\n    getFiledInToken(field: string): string | string[] | null\r\n}",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFiledInToken",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | [] | null",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStorage",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStorage",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "UserOpcional",
            "id": "interface-UserOpcional-bbcc8d5cd7d2054bb60032a43d3587b4ef7308996d5037494e0a6862d847e7a265a8cbdfb15e87150d5298d8335340fcf4159b9bc7b2aefdb8fdd3a70e56ec88",
            "file": "projects/sistema/src/app/user/domain/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserRequired {\r\n    nombre: string;\r\n    correo: string;\r\n    password: string;\r\n    roles: any;\r\n}\r\n\r\nexport interface UserOpcional {\r\n    id: number;\r\n    activo: boolean;\r\n\r\n}\r\n\r\nexport type UserProperties = Required<UserRequired> & Partial<UserOpcional>\r\n\r\nexport type UserUpdate = Partial<{\r\n    nombre: string;\r\n    password: string;\r\n    roles: any;\r\n}>\r\n\r\nexport class User {\r\n    private readonly id: number;\r\n    private nombre: string;\r\n    private readonly correo: string;\r\n    private password: string;\r\n    private activo: boolean;\r\n    private roles: any;\r\n\r\n    constructor(properties: UserProperties) {\r\n        this.activo = true;\r\n        Object.assign(this, properties);\r\n    }\r\n\r\n    properties(): UserProperties {\r\n        return {\r\n            id: this.id,\r\n            nombre: this.nombre,\r\n            correo: this.correo,\r\n            password: this.password,\r\n            activo: this.activo,\r\n            roles: this.roles\r\n        }\r\n    }\r\n    update(fields: UserUpdate) {\r\n        Object.assign(this, fields);\r\n    }\r\n\r\n    delete() {\r\n        this.activo = false;\r\n    }\r\n\r\n}",
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UserRepository",
            "id": "interface-UserRepository-728b9dcd237212bde45f879adc202d1a63206b3c8c7a0c005c62bc8d6042498734853af193de759c611f8e8f44de592b3ef73a984a0483c0d7521a4ba537b828",
            "file": "projects/sistema/src/app/user/domain/user.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Base } from \"../../shared/domain/base.interface\";\r\nimport { User } from \"./user\"\r\n\r\nexport interface UserRepository extends Base<User> {\r\n}",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Base"
        },
        {
            "name": "UserRequired",
            "id": "interface-UserRequired-bbcc8d5cd7d2054bb60032a43d3587b4ef7308996d5037494e0a6862d847e7a265a8cbdfb15e87150d5298d8335340fcf4159b9bc7b2aefdb8fdd3a70e56ec88",
            "file": "projects/sistema/src/app/user/domain/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserRequired {\r\n    nombre: string;\r\n    correo: string;\r\n    password: string;\r\n    roles: any;\r\n}\r\n\r\nexport interface UserOpcional {\r\n    id: number;\r\n    activo: boolean;\r\n\r\n}\r\n\r\nexport type UserProperties = Required<UserRequired> & Partial<UserOpcional>\r\n\r\nexport type UserUpdate = Partial<{\r\n    nombre: string;\r\n    password: string;\r\n    roles: any;\r\n}>\r\n\r\nexport class User {\r\n    private readonly id: number;\r\n    private nombre: string;\r\n    private readonly correo: string;\r\n    private password: string;\r\n    private activo: boolean;\r\n    private roles: any;\r\n\r\n    constructor(properties: UserProperties) {\r\n        this.activo = true;\r\n        Object.assign(this, properties);\r\n    }\r\n\r\n    properties(): UserProperties {\r\n        return {\r\n            id: this.id,\r\n            nombre: this.nombre,\r\n            correo: this.correo,\r\n            password: this.password,\r\n            activo: this.activo,\r\n            roles: this.roles\r\n        }\r\n    }\r\n    update(fields: UserUpdate) {\r\n        Object.assign(this, fields);\r\n    }\r\n\r\n    delete() {\r\n        this.activo = false;\r\n    }\r\n\r\n}",
            "properties": [
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthApplication",
            "id": "injectable-AuthApplication-e7a65e0b531fb1c17b53cc13cbaff28f7320615157b80fb2f61bc8a4b31edd5354fafe0e4be705a450c1e73f665056a7921936d8902a290e7b4989e1e3d85e8a",
            "file": "projects/sistema/src/app/core/application/auth.application.ts",
            "properties": [
                {
                    "name": "userLogged",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getNewAccessToken",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ITokens>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "auth",
                            "type": "Auth",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "Auth",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showMessageError",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "userAuthenticated",
                    "args": [
                        {
                            "name": "response",
                            "type": "ITokens",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "ITokens",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from \"@angular/core\";\r\nimport { Auth } from \"../domain/auth\";\r\nimport { AuthRepository } from \"../domain/auth.repository\";\r\nimport { ITokens } from \"../domain/tokens.interface\";\r\nimport { AuthInfrastructure } from \"../infrastructure/auth.infrastructure\";\r\nimport { StorageApplication } from \"./storage.application\";\r\nimport { Router } from '@angular/router';\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { UtilsService } from \"../../shared/service/utils.service\";\r\n\r\n@Injectable()\r\nexport class AuthApplication {\r\n\r\n    private userLogged = false;\r\n    constructor(\r\n        private readonly router: Router,\r\n        @Inject(AuthInfrastructure) private readonly authRepository: AuthRepository,\r\n        private readonly storageApplication: StorageApplication,\r\n        private utilService: UtilsService) { }\r\n\r\n    login(auth: Auth) {\r\n        return this.authRepository.login(auth).subscribe({\r\n            next: this.userAuthenticated.bind(this),\r\n            error: this.showMessageError.bind(this),\r\n        })\r\n    }\r\n\r\n    private userAuthenticated(response: ITokens) {\r\n        this.storageApplication.setField('accessToken', response.accessToken)\r\n        this.storageApplication.setField('refreshToken', response.refreshToken)\r\n        this.userLogged = true;\r\n        this.router.navigate(['/dashboard'])\r\n    }\r\n\r\n    private showMessageError(error: any) {\r\n        this.utilService.showNotification(\"Credenciales invalidas\");\r\n    }\r\n\r\n    get isUserLogged(): boolean {\r\n        const accessToken = this.storageApplication.getField('accessToken');\r\n        const refreshToken = this.storageApplication.getField('refreshToken');\r\n\r\n        return (!!accessToken && !!refreshToken) || this.userLogged ? true : false;\r\n    }\r\n\r\n    logout() {\r\n        this.userLogged = false;\r\n        this.storageApplication.clear();\r\n        this.router.navigate(['/']);\r\n    }\r\n\r\n    getNewAccessToken(refreshToken: string): Observable<ITokens> {\r\n        return this.authRepository.getNewAccessToken(refreshToken);\r\n    }\r\n\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authRepository",
                        "type": "AuthRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storageApplication",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authRepository",
                        "type": "AuthRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageApplication",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isUserLogged": {
                    "name": "isUserLogged",
                    "getSignature": {
                        "name": "isUserLogged",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 39
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "AuthInfrastructure",
            "id": "injectable-AuthInfrastructure-752a29f26114dcd08865564d4f634afd46b5e8049fa2b48909f476d78689d18deb54c06bde760f0d9bf53a5e493f47574c76f1ff5a1ad0532af05cf8b14c5c40",
            "file": "projects/sistema/src/app/core/infrastructure/auth.infrastructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getNewAccessToken",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ITokens>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "auth",
                            "type": "Auth",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ITokens>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "Auth",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { environment } from \"projects/sistema/src/environments/environment\";\r\nimport { Observable } from \"rxjs\";\r\nimport { Auth } from \"../domain/auth\";\r\nimport { AuthRepository } from \"../domain/auth.repository\";\r\nimport { ITokens } from \"../domain/tokens.interface\";\r\n\r\n@Injectable()\r\nexport class AuthInfrastructure implements AuthRepository {\r\n\r\n    constructor(private readonly http: HttpClient) {\r\n\r\n    }\r\n    login(auth: Auth): Observable<ITokens> {\r\n        return this.http.post<ITokens>(`${environment.apiUrl}/users/login`, auth)\r\n    }\r\n    getNewAccessToken(refreshToken: string): Observable<ITokens> {\r\n        return this.http.get<ITokens>(`${environment.apiUrl}/users/refresh/${refreshToken}`)\r\n\r\n    }\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CovidApplication",
            "id": "injectable-CovidApplication-0ee337c70d8410196cc466af97094476165bd8ec0f1d5698338b98719126f116bad9fa0ce76d41cc5c620c4cfc570fa3e6b7f536e6e36823e5c544b7c8bcc78e",
            "file": "projects/sistema/src/app/dashboard/application/covid.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getCovidData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Graph[]>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from \"@angular/core\";\r\nimport { map, Observable } from \"rxjs\";\r\nimport { CovidModel } from \"../domain/covid.model\";\r\nimport { CovidRepository } from \"../domain/covid.repository\";\r\nimport { Graph } from \"../domain/graph.interface\";\r\nimport { CovidInfastructure } from \"../infrastructure/covid.infrastructure\";\r\n\r\n@Injectable()\r\nexport class CovidApplication {\r\n    constructor(@Inject(CovidInfastructure) private readonly repository: CovidRepository) { }\r\n\r\n    getCovidData(): Observable<Graph[]> {\r\n        return this.repository.getCovidData().pipe(\r\n            map((data: CovidModel[]) =>\r\n                data.map((covid: CovidModel) => ({\r\n                    name: covid.countryRegion,\r\n                    value: covid.confirmed,\r\n                }))\r\n            )\r\n        )\r\n\r\n\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "repository",
                        "type": "CovidRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "repository",
                        "type": "CovidRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CovidInfastructure",
            "id": "injectable-CovidInfastructure-2294a1cac78c618e84826766dc7e6f19b4d5bb02577dcaa3e225ad6ae4b53a8e82bca5f058a9d23838a5bd2f645414e8845d8f18659e3523923ed1d4e5327cbe",
            "file": "projects/sistema/src/app/dashboard/infrastructure/covid.infrastructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getCovidData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CovidModel[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { map, Observable } from \"rxjs\";\r\nimport { CovidModel } from \"../domain/covid.model\";\r\nimport { CovidRepository } from \"../domain/covid.repository\";\r\n\r\n@Injectable()\r\n\r\nexport class CovidInfastructure implements CovidRepository {\r\n\r\n    constructor(private readonly http: HttpClient) {\r\n\r\n    }\r\n    getCovidData(): Observable<CovidModel[]> {\r\n        return this.http.get<CovidModel[]>(\"/api/confirmed\").pipe(\r\n            map((data: CovidModel[]) => data.slice(0, 30))\r\n        );\r\n    }\r\n\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DriverApplication",
            "id": "injectable-DriverApplication-029b4087ccab38cea0047d51a64b226a3c57fa4ea40ffe3101f899807d228a759252852fd5daf8ed877bdb628941f1ef9c890f293ffed51cb81024ecf02dd67b",
            "file": "projects/sistema/src/app/driver/application/driver.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from \"@angular/core\";\r\nimport { BaseApplication } from \"../../shared/application/base.application\";\r\nimport { Driver } from \"../domain/driver\";\r\nimport { DriverRepository } from \"../domain/driver.repository\";\r\nimport { DriverInfraestructure } from \"../infrastructure/driver.infrastructure\";\r\n\r\n@Injectable()\r\nexport class DriverApplication extends BaseApplication<Driver, DriverRepository> {\r\n\r\n    constructor(\r\n        @Inject(DriverInfraestructure)\r\n        private readonly medicRepository: DriverRepository\r\n    ) {\r\n        super(medicRepository)\r\n    }\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "medicRepository",
                        "type": "DriverRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "medicRepository",
                        "type": "DriverRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseApplication",
            "type": "injectable"
        },
        {
            "name": "DriverInfraestructure",
            "id": "injectable-DriverInfraestructure-7a173cfebeb0da60ebefb259b8715d2758c546e11b33c4e1ddf9e6a2cd79ba0c6783afcd42502dfde450cdfe97444f932c98b8a210dbc1453be91a2412333e9d",
            "file": "projects/sistema/src/app/driver/infrastructure/driver.infrastructure.ts",
            "properties": [
                {
                    "name": "httpClient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResultPage<Entity>>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { BaseInfraestructure } from \"../../shared/infrastructure/base-infrastructure\";\r\nimport { Driver } from \"../domain/driver\";\r\nimport { DriverRepository } from \"../domain/driver.repository\";\r\n\r\n@Injectable()\r\nexport class DriverInfraestructure\r\n    extends BaseInfraestructure<Driver>\r\n    implements DriverRepository {\r\n\r\n\r\n    constructor(http: HttpClient) {\r\n        super(http, \"drivers\");\r\n        this.httpClient = http;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseInfraestructure",
            "type": "injectable"
        },
        {
            "name": "IconService",
            "id": "injectable-IconService-a281b7858545d178c4fa967b0b2c016a630543d6efe332b5b210d7bb78d5ffd386a8ce45e9b6d8f9af581ec544cd4e63ab51813a15fea121486913a74ed8f56f",
            "file": "projects/sistema/src/app/shared/service/icon.service.ts",
            "properties": [
                {
                    "name": "listIcons",
                    "defaultValue": "[\n    { name: \"diver\", path: \"../../assets/icons/driver2.svg\" },\n    { name: \"history\", path: \"../../assets/icons/historia.svg\" },\n    { name: \"medic\", path: \"../../assets/icons/medico.svg\" },\n    { name: \"user\", path: \"../../assets/icons/user2.svg\" },\n    { name: \"dashboard\", path: \"../../assets/icons/tablero.svg\" },\n    { name: \"logo\", path: \"../../assets/icons/ambulance2.svg\" },\n    { name: \"excel\", path: \"../../assets/icons/excel.svg\" },\n    { name: \"pdf\", path: \"../../assets/icons/pdf.svg\" },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Icon[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\ninterface Icon {\n  name: string;\n  path: string\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IconService {\n\n\n  private listIcons: Icon[] = [\n    { name: \"diver\", path: \"../../assets/icons/driver2.svg\" },\n    { name: \"history\", path: \"../../assets/icons/historia.svg\" },\n    { name: \"medic\", path: \"../../assets/icons/medico.svg\" },\n    { name: \"user\", path: \"../../assets/icons/user2.svg\" },\n    { name: \"dashboard\", path: \"../../assets/icons/tablero.svg\" },\n    { name: \"logo\", path: \"../../assets/icons/ambulance2.svg\" },\n    { name: \"excel\", path: \"../../assets/icons/excel.svg\" },\n    { name: \"pdf\", path: \"../../assets/icons/pdf.svg\" },\n  ];\n\n  constructor(private matIconRegistry: MatIconRegistry, private domSanitizer: DomSanitizer) {\n    for (let icon of this.listIcons) {\n      this.matIconRegistry.addSvgIcon(icon.name, this.domSanitizer.bypassSecurityTrustResourceUrl(icon.path));\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LayoutService",
            "id": "injectable-LayoutService-cbf76812a727280bc0b00e0ce42a3f7ef87d186fa0deb400950e429862cddcb66e5c496e3daa4591db0bbec445a74a4714fc21ffa0f0503327ee1ac24ab52765",
            "file": "projects/sistema/src/app/config/injections/layout/services/layoutservice.ts",
            "properties": [
                {
                    "name": "configSubject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ILayout>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable, Subject } from \"rxjs\";\r\nimport { ILayout } from \"../interface/layout.interface\";\r\nimport { LAYOUT_TOCKEN } from \"../tokens/layout.token\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class LayoutService {\r\n\r\n    private configSubject: BehaviorSubject<ILayout>;\r\n\r\n    constructor(@Inject(LAYOUT_TOCKEN) private config: ILayout) {\r\n\r\n        this.configSubject = new BehaviorSubject<ILayout>(config)\r\n\r\n    }\r\n\r\n    set configuration(config: any) {\r\n        this.configSubject.next(config);\r\n    }\r\n\r\n    get configuration(): Observable<ILayout> {\r\n        return this.configSubject.asObservable();\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ILayout",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ILayout",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "configuration": {
                    "name": "configuration",
                    "setSignature": {
                        "name": "configuration",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "config",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "config",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "configuration",
                        "type": "",
                        "returnType": "Observable<ILayout>",
                        "line": 24
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "MedicApplication",
            "id": "injectable-MedicApplication-0d2b0fbfaab535d999ce221c368948478e7e8e6412b58c73929b7077195b508c5021a64ab716ab0e6cb00731215e0b4b1a8e13f8a9c61f19ebf3fcf389b0fa53",
            "file": "projects/sistema/src/app/medic/application/medic.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from \"@angular/core\";\r\nimport { BaseApplication } from \"../../shared/application/base.application\";\r\nimport { Medic } from \"../domain/medic\";\r\nimport { MedicRepository } from \"../domain/medic.repository\";\r\nimport { MedicInfraestructure } from \"../infrastructure/medic.infraestructure\";\r\n\r\n@Injectable()\r\nexport class MedicApplication\r\n    extends BaseApplication<Medic, MedicRepository> {\r\n\r\n    constructor(\r\n        @Inject(MedicInfraestructure)\r\n        private readonly medicRepository: MedicRepository\r\n    ) {\r\n        super(medicRepository)\r\n    }\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "medicRepository",
                        "type": "MedicRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "medicRepository",
                        "type": "MedicRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseApplication",
            "type": "injectable"
        },
        {
            "name": "MedicInfraestructure",
            "id": "injectable-MedicInfraestructure-01478176d99cea6c8b1357b7847651354f0af8bf0df8b06b61e23182fda017adaaeb55d878ab45497882e87850b3eee8532f00080d6832f8700dd09019834179",
            "file": "projects/sistema/src/app/medic/infrastructure/medic.infraestructure.ts",
            "properties": [
                {
                    "name": "httpClient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResultPage<Entity>>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { BaseInfraestructure } from \"../../shared/infrastructure/base-infrastructure\";\r\nimport { Medic } from \"../domain/medic\";\r\nimport { MedicRepository } from \"../domain/medic.repository\";\r\n\r\n@Injectable()\r\nexport class MedicInfraestructure\r\n    extends BaseInfraestructure<Medic>\r\n    implements MedicRepository {\r\n\r\n\r\n    constructor(http: HttpClient) {\r\n        super(http, \"medics\");\r\n        this.httpClient = http;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseInfraestructure",
            "type": "injectable"
        },
        {
            "name": "MenuService",
            "id": "injectable-MenuService-0a2602eb9c403b9712f76232256ffcaefc2ed5cdd01cda0e7bbd42b01fe676bc8f634fe1669e137177ca0f83f653e047552fe392dd8a598086b70d6dec96ec64",
            "file": "projects/sistema/src/app/shared/service/menu.service.ts",
            "properties": [
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getDataPath",
                    "args": [
                        {
                            "name": "currentPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Menu",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItems",
                    "args": [],
                    "optional": false,
                    "returnType": "Menu[]",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport interface Menu {\n  title: string;\n  url: string;\n  icon: string;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MenuService {\n\n  private menu: Menu[];\n\n  constructor() {\n    this.menu = [\n      { title: 'Dashboard', url: '/dashboard', icon: 'dashboard' },\n      { title: 'User', url: '/user', icon: 'user' },\n      { title: 'Medic', url: '/medic', icon: 'medic' },\n      { title: 'Driver', url: '/driver', icon: 'diver' },\n      { title: 'History', url: '/history', icon: 'history' },\n    ];\n  }\n\n  getItems(): Menu[] {\n    return [...this.menu];\n    //return Object.assign([], this.menu)\n  }\n\n  getDataPath(currentPath: string): Menu {\n    const menu = this.menu.find((el: Menu) => el.url === currentPath);\n    return menu as Menu;\n    // return Object.assign([], this.menu);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "type": "injectable"
        },
        {
            "name": "Paginator",
            "id": "injectable-Paginator-7353215c46df267831a17b40153c7f0e50f9cf11050060465b29d4b175c282450d1db8db797a04faf583737c70b30bc56e53b790c828460842f85765a1d090ba",
            "file": "projects/sistema/src/app/shared/service/paginator.service.ts",
            "properties": [
                {
                    "name": "firstPageLabel",
                    "defaultValue": "\"Primera Pagina\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "getRangeLabel",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "itemsPerPageLabel",
                    "defaultValue": "\"Item por pagina\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "lastPageLabel",
                    "defaultValue": "\"Ultima Pagina\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "nextPageLabel",
                    "defaultValue": "\"Siguiente Pagina\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "previousPageLabel",
                    "defaultValue": "\"Pagina Anterior\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        158
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatPaginatorIntl } from '@angular/material/paginator';\n\n@Injectable()\nexport class Paginator extends MatPaginatorIntl {\n\n  override itemsPerPageLabel = \"Item por pagina\"\n  override nextPageLabel = \"Siguiente Pagina\"\n  override previousPageLabel = \"Pagina Anterior\"\n  override firstPageLabel = \"Primera Pagina\"\n  override lastPageLabel = \"Ultima Pagina\"\n\n  override  getRangeLabel = (page: number, pageSize: number, length: number): string => {\n    if (length === 0 || pageSize === 0) {\n      return '0 de ' + length\n    }\n\n    length = Math.max(length);\n    const start = page * pageSize;\n    const end = start < length ? Math.min(start + pageSize, length) : start + pageSize;\n\n    return `${start + 1} - ${end} de ${length} `\n  };\n\n}\n",
            "extends": "MatPaginatorIntl",
            "type": "injectable"
        },
        {
            "name": "RoleApplication",
            "id": "injectable-RoleApplication-b4dfd5a18f383ae8aa404eb93f5a67cd1d97734db3d4f8874e2d1269325741006b07c64b69393abd177a570ec2ad1b03bf6d999b12f5bd6d2c8e5cb8d0b08361",
            "file": "projects/sistema/src/app/roles/application/role.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from \"@angular/core\";\r\nimport { BaseApplication } from \"../../shared/application/base.application\";\r\nimport { Role } from \"../domain/role\";\r\nimport { RoleRepository } from \"../domain/role.repository\";\r\nimport { RoleInfrastructure } from \"../infrastructure/role.infrastructure\";\r\n\r\n@Injectable()\r\nexport class RoleApplication\r\n    extends BaseApplication<Role, RoleRepository> {\r\n\r\n    constructor(\r\n        @Inject(RoleInfrastructure)\r\n        private readonly roleRepository: RoleRepository\r\n    ) {\r\n        super(roleRepository)\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "roleRepository",
                        "type": "RoleRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "roleRepository",
                        "type": "RoleRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseApplication",
            "type": "injectable"
        },
        {
            "name": "RoleInfrastructure",
            "id": "injectable-RoleInfrastructure-d7529041a7faab2780a4d7533d8364d1ab7840af9f911e874ca5a41e31f4eb0db0043ea9678617f6db6a45fd29b1e85c955163a966659f174ff678be3bc2b5e5",
            "file": "projects/sistema/src/app/roles/infrastructure/role.infrastructure.ts",
            "properties": [
                {
                    "name": "httpClient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResultPage<Entity>>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { BaseInfraestructure } from \"../../shared/infrastructure/base-infrastructure\";\r\nimport { Role } from \"../domain/role\";\r\nimport { RoleRepository } from \"../domain/role.repository\";\r\n\r\n@Injectable()\r\nexport class RoleInfrastructure\r\n    extends BaseInfraestructure<Role>\r\n    implements RoleRepository {\r\n\r\n    constructor(http: HttpClient) {\r\n        super(http, \"roles\");\r\n        this.httpClient = http;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseInfraestructure",
            "type": "injectable"
        },
        {
            "name": "SocketApplication",
            "id": "injectable-SocketApplication-8aaa429d6d94019f56b41dc3f0ca155d95f70e80ad95ae3abef583a63683d572d1275d07c4234130d4ffd57409f2c6486907420bf926983eda1c84f13d3fc8ff",
            "file": "projects/sistema/src/app/dashboard/application/socket.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Graph[]>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Graph } from '../domain/graph.interface';\r\nimport { SocketRepository } from '../domain/socket.repository';\r\nimport { SocketInfrastructure } from '../infrastructure/socket.infrastructure';\r\n\r\n@Injectable()\r\nexport class SocketApplication {\r\n    constructor(@Inject(SocketInfrastructure) private socket: SocketRepository) { }\r\n\r\n    listen(eventName: string): Observable<Graph[]> {\r\n        return this.socket.listen(eventName);\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "SocketRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "SocketRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SocketInfrastructure",
            "id": "injectable-SocketInfrastructure-bbaac152122c85147795cf6330e308c3d37d2be8622aa9a6b4eb7829a0f344d472965df1d9577cbb518d370224291af988ee99cadc6067e0a65820a83e7a6fd5",
            "file": "projects/sistema/src/app/dashboard/infrastructure/socket.infrastructure.ts",
            "properties": [
                {
                    "name": "socket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "io.Socket",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Graph[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, Observer } from 'rxjs';\r\nimport { Graph } from '../domain/graph.interface';\r\nimport { SocketRepository } from '../domain/socket.repository';\r\nimport * as io from 'socket.io-client';\r\n\r\n@Injectable()\r\nexport class SocketInfrastructure implements SocketRepository {\r\n    private socket: io.Socket;\r\n\r\n    constructor() {\r\n        this.socket = io.connect('https://p7inv.sse.codesandbox.io/');\r\n    }\r\n\r\n    listen(eventName: string): Observable<Graph[]> {\r\n        return new Observable((observer: Observer<Graph[]>) => {\r\n            this.socket.on(eventName, (data: Graph[]) => observer.next(data));\r\n        });\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "StorageApplication",
            "id": "injectable-StorageApplication-f731d2ae3eb3bb804eba5cf59fcfa2d414f77d698fe032cf82ae2825aaf698dab51392eafdf3a2e2ff6d22e44a1fa94e95ff1a5821d8b56fc57beb16616d4e25",
            "file": "projects/sistema/src/app/core/application/storage.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getField",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFieldToken",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | [] | null",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setField",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from \"@angular/core\";\r\nimport { StorageRepository } from \"../domain/storage.repository\";\r\nimport { StorageInfrastructure } from \"../infrastructure/storage.infrastructure\";\r\n\r\n@Injectable()\r\nexport class StorageApplication {\r\n    constructor(\r\n        @Inject(StorageInfrastructure) private readonly storage: StorageRepository\r\n    ) { }\r\n\r\n    setField(property: string, value: string): void {\r\n        this.storage.setStorage(property, value);\r\n    }\r\n\r\n    getField(property: string): string | null {\r\n        return this.storage.getStorage(property);\r\n    }\r\n\r\n    getFieldToken(field: string): string | string[] | null {\r\n        return this.storage.getFiledInToken(field);\r\n    }\r\n\r\n    clear(): void {\r\n        this.storage.clear();\r\n    }\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StorageInfrastructure",
            "id": "injectable-StorageInfrastructure-4aec9384b0b93b0e09ae489dd421dfbc3cf5400c616a3325c210f11ccd56b6e3b83ee66b075bb5880ee8bf9cb0376bdaad4b07c6d35878c1752b99fe1f39e79a",
            "file": "projects/sistema/src/app/core/infrastructure/storage.infrastructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFiledInToken",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | []",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStorage",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStorage",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { StorageRepository } from \"../domain/storage.repository\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\n@Injectable()\r\nexport class StorageInfrastructure implements StorageRepository {\r\n\r\n    setStorage(property: string, value: string): void {\r\n        sessionStorage.setItem(property, value)\r\n    }\r\n\r\n    getStorage(property: string): string | null {\r\n        return sessionStorage.getItem(property);\r\n    }\r\n\r\n    clear(): void {\r\n        sessionStorage.clear();\r\n    }\r\n\r\n    getFiledInToken(field: string): string | string[] {\r\n        const accessToken = sessionStorage.getItem('accessToken');\r\n        const payload = jwtDecode(accessToken)\r\n        return payload[field];\r\n    }\r\n\r\n}",
            "type": "injectable"
        },
        {
            "name": "UserApplication",
            "id": "injectable-UserApplication-0e1c4004191db7cb4c5da3b7cb4e848da140081249b1b2bd1cc1d060c376880ff12a33cf7c743535f78e7e4eaec3acf51c3820ef81a960b8b180b7157caac816",
            "file": "projects/sistema/src/app/user/application/user.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from \"@angular/core\";\r\nimport { User } from \"../domain/user\";\r\nimport { UserRepository } from \"../domain/user.repository\";\r\nimport { UserInfrastructure } from \"../infrastructure/user.infrastructure\";\r\nimport { BaseApplication } from \"../../shared/application/base.application\";\r\n\r\n@Injectable()\r\nexport class UserApplication extends BaseApplication<User, UserRepository>{\r\n\r\n    constructor(\r\n        @Inject(UserInfrastructure) private readonly userRepository: UserRepository) {\r\n        super(userRepository);\r\n    }\r\n\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userRepository",
                        "type": "UserRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "userRepository",
                        "type": "UserRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseApplication",
            "type": "injectable"
        },
        {
            "name": "UserInfrastructure",
            "id": "injectable-UserInfrastructure-f054843b77ebe2648d4e99f3efd6aa9664fb19d648f0e846b35581f8bbb80364f179af66538049c42264bdb6479b4da88638ac0e26cd6be61166cccf4d0ffd36",
            "file": "projects/sistema/src/app/user/infrastructure/user.infrastructure.ts",
            "properties": [
                {
                    "name": "httpClient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResultPage<Entity>>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfraestructure"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { BaseInfraestructure } from \"../../shared/infrastructure/base-infrastructure\";\r\nimport { User } from \"../domain/user\";\r\nimport { UserRepository } from \"../domain/user.repository\";\r\n\r\n@Injectable()\r\nexport class UserInfrastructure\r\n    extends BaseInfraestructure<User>\r\n    implements UserRepository {\r\n\r\n    constructor(http: HttpClient) {\r\n        super(http, \"users\")\r\n        this.httpClient = http\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseInfraestructure",
            "type": "injectable"
        },
        {
            "name": "UtilsService",
            "id": "injectable-UtilsService-002406657b90a0075a858f47eb066850b96d6ea49a140506a384c836b94087e430247c8ec98029f0038a4483e18f7b21bb99d2f43ed09e4bfd42dee36cfb6027",
            "file": "projects/sistema/src/app/shared/service/utils.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "dtoExcel",
                    "args": [
                        {
                            "name": "records",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "Entity"
                    ],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "records",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportToExcel",
                    "args": [
                        {
                            "name": "records",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sheetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "Entity"
                    ],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "records",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sheetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportToPDF",
                    "args": [
                        {
                            "name": "records",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "Entity"
                    ],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "records",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateColum",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "style",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "{ text: string; }",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "style",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generatePdf",
                    "args": [
                        {
                            "name": "dataFormatted",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataFormatted",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateRowData",
                    "args": [
                        {
                            "name": "data",
                            "type": "Partial<Entity>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [
                        "Entity"
                    ],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Partial<Entity>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "{ headerLeft: { fontFamily: string; fontSize: string; height: number; color: string; }; subHeaderLeft: { fontFamily: string; fontSize: number; height: number; color: string; }; titleReport: { fontFamily: string; fontSize: number; height: number; color: string; }; header: { ...; }; }",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "generateTableData",
                    "args": [
                        {
                            "name": "data",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ margin: {}; table: { widths: any; body: any; }; }",
                    "typeParameters": [
                        "Entity"
                    ],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateTableHeader",
                    "args": [
                        {
                            "name": "data",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dataUrl",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ margin: {}; table: { widths: {}; body: {}; }; }",
                    "typeParameters": [
                        "Entity"
                    ],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataUrl",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataUrl",
                    "args": [
                        {
                            "name": "pathLogo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "pathLogo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showConfirm",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"\""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showModalWindow",
                    "args": [
                        {
                            "name": "classComponent",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MatDialogRef<any>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "classComponent",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showNotification",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ConfirmComponent } from '../components/confirm/confirm.component';\nimport { MetaColumn } from '../interfaces/metacolumn.interface';\n\nimport * as XLSX from 'xlsx';\n\nimport pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n@Injectable()\nexport class UtilsService {\n\n  constructor(private readonly dialog: MatDialog, private readonly notification: MatSnackBar) { }\n\n  showModalWindow(\n    classComponent: any,\n    options: { [s: string]: string | number | boolean | object }\n  ): MatDialogRef<any> {\n    return this.dialog.open(classComponent, options);\n  }\n  showConfirm(message: string = \"\") {\n    const reference = this.dialog.open(ConfirmComponent, { width: \"340px\", disableClose: true });\n    if (message) {\n      reference.componentInstance.messageToConfirm = message;\n    }\n    return reference.afterClosed();\n  }\n\n  showNotification(message: string) {\n    this.notification.open(message, '', {\n      duration: 3000\n    });\n  }\n\n\n  exportToExcel<Entity>(records: Entity[], metacolumns: MetaColumn[], fileName: string, sheetName: string) {\n    const result = this.dtoExcel(records, metacolumns);\n    const ws: XLSX.WorkSheet = XLSX.utils.json_to_sheet([]);\n    XLSX.utils.sheet_add_json(ws, result);\n    const wb: XLSX.WorkBook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, sheetName);\n    XLSX.writeFile(wb, `${fileName}.xlsx`);\n  }\n\n  private dtoExcel<Entity>(records: Entity[], metacolumns: MetaColumn[]) {\n    return records.map((item: Entity) => {\n      const newElement = {}\n      for (const prop in item) {\n        const metaData = metacolumns.find(el => el.field === prop);\n        if (metaData) {\n          newElement[metaData.title] = item[prop]\n        }\n      }\n      return newElement;\n    })\n  }\n\n  async exportToPDF<Entity>(records: Entity[], metacolumns: MetaColumn[], fileName: string, title: string) {\n\n    const _dataUrl = await this.getDataUrl('/assets/img/logo2.png');\n\n    const dataFormatted = {\n      pageSize: \"A4\",\n      pageOrientation: \"portrait\",\n      pageMargins: [20, 20, 20, 20],\n      content: [\n        this.generateTableHeader(records, _dataUrl, title.toUpperCase()),\n        this.generateTableData(records, metacolumns)\n      ],\n      styles: this.generateStyles()\n    };\n\n    this.generatePdf(dataFormatted, fileName)\n  }\n\n  private generateTableData<Entity>(data: Entity[], metacolumns: MetaColumn[]) {\n    const body = data.map((el) => {\n      const newElement = {};\n      Object.keys(el).forEach((key) => {\n        const metaData = metacolumns.find((el) => el.field === key);\n        if (metaData) {\n          newElement[metaData.field] = el[key];\n        }\n      })\n      return newElement;\n    }).map(el => Object.keys(el).map((prop) => this.generateRowData(el, metacolumns, prop)));\n\n    const quantityCols = metacolumns.length;\n    const widths = Array.from(Array(quantityCols).keys()).map(el => Math.floor(100 / quantityCols) + \"%\");\n\n    const rows = [];\n    metacolumns.forEach((el) => {\n      const row = [\n        {\n          border: [false, false, false, false],\n          text: el.title,\n          style: 'header'\n        }\n      ];\n\n      rows.push(row);\n    });\n\n    body.unshift(rows);\n\n    return {\n      margin: [0, 0, 0, 15],\n      table: {\n        widths,\n        body\n      }\n    }\n  }\n\n  private generateRowData<Entity>(data: Partial<Entity>, metacolumns: MetaColumn[], key: string) {\n    const column = metacolumns.find(el => el.field === key);\n\n    if (column) {\n      return [\n        {\n          border: [false, false, false, false],\n          text: data[key]\n        }\n      ]\n    } else {\n      return [];\n    }\n  }\n\n  private generateTableHeader<Entity>(data: Entity[], dataUrl: any, title: string) {\n    return {\n      margin: [0, 0, 0, 15],\n      table: {\n        widths: [120, 'auto', 50, 'auto'],\n        body: [\n          [\n            {\n              borderWidth: ['1px', '1px', '1px', '1px'],\n              borderColor: ['#000', '#000', '#000', '#000'],\n              border: [false, false, true, false],\n              width: 100,\n              image: dataUrl,\n            },\n            {\n              border: [false, false, false, false],\n              text: [\n                this.generateColum('Channel Company', 'headerLeft'),\n                this.generateColum('Av. De La República 3645', 'subHeaderLeft'),\n                this.generateColum('San Isidro, Lima Perú', 'subHeaderLeft'),\n                this.generateColum('Tel: (591) 222-2222', 'subHeaderLeft'),\n                this.generateColum('info@channel.com', 'subHeaderLeft'),\n                this.generateColum('www.channel.com', 'subHeaderLeft'),\n              ],\n            },\n            {\n              border: [false, false, false, false],\n              text: '',\n            },\n            {\n              border: [false, false, false, false],\n              text: title,\n              style: 'titleReport',\n            },\n          ],\n        ],\n      },\n    };\n  }\n\n  private generatePdf(dataFormatted: any, fileName: string) {\n    const docGenerated = pdfMake.createPdf(dataFormatted);\n    //docGenerated.download(`${fileName}.pdf`);\n    docGenerated.print();\n  }\n\n  private async getDataUrl(pathLogo: string) {\n    const blob = await fetch(pathLogo).then((r) => r.blob());\n    const dataUrl = await new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        resolve(reader.result);\n      };\n      reader.readAsDataURL(blob);\n    });\n\n    return dataUrl;\n  }\n\n  private generateStyles() {\n    return {\n      headerLeft: {\n        fontFamily: 'Verdana',\n        fontSize: '13',\n        height: 16,\n        color: '#3c3b40',\n      },\n      subHeaderLeft: {\n        fontFamily: 'Verdana',\n        fontSize: 10,\n        height: 16,\n        color: '#3c3b40',\n      },\n      titleReport: {\n        fontFamily: 'Verdana',\n        fontSize: 15,\n        height: 16,\n        color: '#3c3b40',\n      },\n      header: {\n        fontFamily: 'Verdana',\n        fontSize: 13,\n        height: 14,\n        color: '#3c3b40',\n        bold: true,\n      },\n    };\n  }\n\n  private generateColum(text: string, style: any = null) {\n    const column = {\n      text: text + '\\n',\n    };\n\n    if (style) {\n      column['style'] = style;\n    }\n\n    return column;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notification",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notification",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthenticationGuard",
            "id": "injectable-AuthenticationGuard-9564fdf4bb862de978e63942c4c2a10f29e94922f859133af6366e874a7c5ca3e4d9b05ada4662d4aed004a1dea9802601fd9f915574ed230d064c27c508f171",
            "file": "projects/sistema/src/app/shared/guards/authentication.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean | Promise | Observable",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "canLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validUserLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { CanActivate, CanLoad } from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthApplication } from \"../../core/application/auth.application\";\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthenticationGuard implements CanActivate, CanLoad {\r\n\r\n    constructor(private readonly auth: AuthApplication) { }\r\n    canActivate(): boolean | Promise<boolean> | Observable<boolean> {\r\n        return this.auth.isUserLogged;\r\n    }\r\n\r\n    canLoad(): boolean {\r\n        return this.validUserLoad();\r\n    }\r\n\r\n    private validUserLoad(): boolean {\r\n        const isLogged = this.auth.isUserLogged;\r\n        if (!isLogged) {\r\n            this.auth.logout();\r\n        }\r\n        return isLogged;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "TokenInterceptor",
            "id": "injectable-TokenInterceptor-ff6081c51c42733be809050184a463c0d0622878c5e376277289fc1f79a7b4ebceaa8143746a08b780e8882472c6e6ca4235b99314f4e74e13d897726f9a2298",
            "file": "projects/sistema/src/app/shared/interceptors/token.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handlerErrorBackend",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable, Injector } from \"@angular/core\";\r\nimport { catchError, mergeMap, Observable, retry, throwError } from \"rxjs\";\r\nimport { AuthApplication } from \"../../core/application/auth.application\";\r\nimport { StorageApplication } from \"../../core/application/storage.application\";\r\nimport { ITokens } from \"../../core/domain/tokens.interface\";\r\n\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n    constructor(\r\n        private readonly storage: StorageApplication,\r\n        private readonly injector: Injector\r\n    ) { }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n        const accessToken = this.storage.getField('accessToken');\r\n        const clonedRequest = req.clone({\r\n            headers: req.headers.append('Authorization', `Bearer ${accessToken}`),\r\n        });\r\n\r\n        return next.handle(clonedRequest).pipe(\r\n            catchError((error: HttpErrorResponse) => {\r\n                let errorMessage = '';\r\n\r\n                if (error.error instanceof ErrorEvent) {\r\n                    // client-side error\r\n                    errorMessage = `Error: ${error.error.message}`;\r\n                } else {\r\n                    // server-side error\r\n                    errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n                    return this.handlerErrorBackend(error, req, next);\r\n                }\r\n\r\n                return throwError(() => new Error(errorMessage));\r\n            })\r\n        );\r\n    }\r\n\r\n    handlerErrorBackend(\r\n        error: HttpErrorResponse,\r\n        req: HttpRequest<any>,\r\n        next: HttpHandler\r\n    ): Observable<any> {\r\n        const auth = this.injector.get(AuthApplication);\r\n\r\n        if (error.status === 409) {\r\n            const refreshToken = this.storage.getField('refreshToken');\r\n\r\n            return auth.getNewAccessToken(refreshToken).pipe(\r\n                retry(3),\r\n                mergeMap((tokens: ITokens) => {\r\n                    this.storage.setField('accessToken', tokens.accessToken);\r\n                    this.storage.setField('refreshToken', tokens.refreshToken);\r\n\r\n                    const clonedRequest = req.clone({\r\n                        headers: req.headers.append(\r\n                            'Authorization',\r\n                            `Bearer ${tokens.accessToken}`\r\n                        ),\r\n                    });\r\n\r\n                    return next.handle(clonedRequest);\r\n                })\r\n            );\r\n        } else if (error.status === 401) {\r\n            auth.logout();\r\n        }\r\n\r\n        return throwError(() => new Error('Unauthorized'));\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "Auth",
            "id": "class-Auth-f3a39eb75e7465ced3048fe21df6bf8d8b7107ffa6f4f82285763523dc3acc341182d9fefdb33bc080d1a0cb31cd4fcb70a4223909c1a364f74560f0cc486839",
            "file": "projects/sistema/src/app/core/domain/auth.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface AuthRequired {\r\n    correo: string;\r\n    password: string;\r\n}\r\n\r\nexport interface AuthOptional {\r\n    recaptchaReactive: string;\r\n}\r\n\r\nexport type AuthProperties = Required<AuthRequired> & Required<AuthOptional>\r\n\r\nexport class Auth {\r\n    private readonly correo: string;\r\n    private readonly password: string;\r\n    private readonly recaptchaReactive: string;\r\n\r\n    constructor(properties: AuthProperties) {\r\n        Object.assign(this, properties);\r\n    }\r\n\r\n    properties(): AuthProperties {\r\n        return {\r\n            correo: this.correo,\r\n            password: this.password,\r\n            recaptchaReactive: this.recaptchaReactive\r\n        }\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "properties",
                        "type": "AuthProperties",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "properties",
                        "type": "AuthProperties",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "recaptchaReactive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "properties",
                    "args": [],
                    "optional": false,
                    "returnType": "AuthProperties",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AuthFactory",
            "id": "class-AuthFactory-232678c3166bca527be81432e17559d4886dc0bed156d8d2335ebe1411d4358680bb181bae41d39c42bbf23acd7ee0762331e1f7297537ffd07ddf090ad78e26",
            "file": "projects/sistema/src/app/core/domain/auth.factory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Auth, AuthProperties } from \"./auth\";\r\n\r\nexport class AuthFactory {\r\n    static create(correo: string, password: string): Auth {\r\n\r\n        const recaptchaReactive = 'abc'\r\n\r\n        const authProperties: AuthProperties = {\r\n            correo,\r\n            password,\r\n            recaptchaReactive\r\n        };\r\n\r\n        if (correo.trim() === '') {\r\n            throw new Error(\"correo must not be empty\");\r\n        }\r\n\r\n        if (password.trim() === '') {\r\n            throw new Error(\"password must not be empty\");\r\n        }\r\n\r\n        return new Auth(authProperties);\r\n    }\r\n}",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "correo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Auth",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "correo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseApplication",
            "id": "class-BaseApplication-07ba4acd6be7f94821a09ca6e49c47ca3b57f3d112df4fdfed5e1bcba5ce82bedc52fd3faae1275b0477f08796f111ea8239d02a86148e529fc175c6f3c7ab4a",
            "file": "projects/sistema/src/app/shared/application/base.application.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Base } from \"../domain/base.interface\";\r\n\r\nexport abstract class BaseApplication<Entity, Repository extends Base<Entity>>{\r\n\r\n    constructor(private readonly repository: Repository) { }\r\n\r\n    insert(entity: Entity) {\r\n        return this.repository.insert(entity);\r\n    }\r\n\r\n    list() {\r\n        return this.repository.list()\r\n    }\r\n\r\n    listOne(id: number) {\r\n        return this.repository.listOne(id);\r\n    }\r\n\r\n    update(id: number, entity: Entity) {\r\n        return this.repository.update(id, entity)\r\n    }\r\n\r\n    delete(id: number) {\r\n        return this.repository.delete(id);\r\n    }\r\n\r\n    page(page: number) {\r\n        return this.repository.page(page);\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "repository",
                        "type": "Repository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "repository",
                        "type": "Repository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseComponent",
            "id": "class-BaseComponent-8ffde743cada0ce346afeccf6cc70cbf0987a20592fbdbc18a463175c385ea149f78a0ed60e5c5fb474ced19da1e1453fa495cd961e294821c3a7430308ab0c7",
            "file": "projects/sistema/src/app/shared/components/base/base-component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { MatDialogRef } from \"@angular/material/dialog\";\r\nimport { environment } from \"projects/sistema/src/environments/environment\";\r\nimport { IApplication } from \"../../application/interface-application\";\r\nimport { IResultPage } from \"../../interface/result-page.interface\";\r\nimport { MetaColumn } from \"../../interfaces/metacolumn.interface\";\r\nimport { UtilsService } from \"../../service/utils.service\";\r\n\r\nenum TypeExport {\r\n    EXCEL = 'excel',\r\n    PDF = 'pdf',\r\n}\r\nexport abstract class BaseComponent<Entity, Application extends IApplication<Entity>, Modal> {\r\n    abstract listFields: string[];\r\n    abstract metaColumns: MetaColumn[];\r\n\r\n    quantityRecords: number;\r\n    currentPage: number = 0;\r\n    pageSize: number = environment.pageSize;\r\n\r\n    protected fileName: string = 'data';\r\n    protected sheetName: string = 'Sheet1';\r\n    protected titleReport: string = 'Titulo Reporte';\r\n\r\n    private application: Application;\r\n    protected dataSource: any[] = [];\r\n\r\n    constructor(application: Application, protected utilsService: UtilsService, private context: any) {\r\n        this.application = application;\r\n        this.getRecordsByPage(0);\r\n    }\r\n\r\n    getRecordsByPage(page: number): void {\r\n        this.application.page(page).subscribe({ next: this.fillDataSource.bind(this) });\r\n        this.currentPage = page;\r\n    }\r\n\r\n    private fillDataSource(result: IResultPage<Entity>) {\r\n        this.dataSource = result.records;\r\n        this.quantityRecords = result.totalRecords;\r\n    }\r\n\r\n    protected delete(row: any) {\r\n        console.log(row)\r\n        this.utilsService\r\n            .showConfirm('¿Esta seguro de eliminar el registro?')\r\n            .subscribe((response: boolean) => {\r\n                if (response) {\r\n                    this.application.delete(row.id).subscribe(() => {\r\n                        this.getRecordsByPage(this.currentPage);\r\n                        this.utilsService.showNotification('Registro Eliminado');\r\n                    })\r\n                }\r\n            })\r\n    }\r\n\r\n    protected showModalWindow(row: any = null) {\r\n\r\n        const reference: MatDialogRef<Modal> = this.utilsService.showModalWindow(this.context, {\r\n            disableClose: true,\r\n            panelClass: \"form-modal-medic\",\r\n            data: row\r\n        });\r\n\r\n        reference.afterClosed().subscribe((response: any) => {\r\n            if (!response) {\r\n                return;\r\n            }\r\n\r\n            if (response.id) {\r\n                this.application.update(response.id, response.record).subscribe(() => {\r\n\r\n                    this.getRecordsByPage(this.currentPage)\r\n                    this.utilsService.showNotification('Registro Actualizado');\r\n                });\r\n            } else {\r\n                this.application.insert(response.record).subscribe(() => {\r\n                    this.getRecordsByPage(this.currentPage);\r\n                    this.utilsService.showNotification('Registro Insertado');\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    protected export(type: string) {\r\n        this.application.list().subscribe((records: Entity[]) => {\r\n            if (type === TypeExport.EXCEL) {\r\n                this.utilsService.exportToExcel(records, this.metaColumns, this.fileName, this.sheetName)\r\n            } else if (type === TypeExport.PDF) {\r\n                this.utilsService.exportToPDF(records, this.metaColumns, this.fileName, this.titleReport)\r\n            }\r\n        })\r\n    }\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "application",
                        "type": "Application",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "context",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "application",
                        "type": "Application",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "application",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Application",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "dataSource",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "fileName",
                    "defaultValue": "'data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "listFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "metaColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "pageSize",
                    "defaultValue": "environment.pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "quantityRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "sheetName",
                    "defaultValue": "'Sheet1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "titleReport",
                    "defaultValue": "'Titulo Reporte'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillDataSource",
                    "args": [
                        {
                            "name": "result",
                            "type": "IResultPage<Entity>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "IResultPage<Entity>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecordsByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showModalWindow",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseInfraestructure",
            "id": "class-BaseInfraestructure-6ff4092ffc3ec68dbeea68f5102f57a063389909944cbc99db4cdf385294a1d32061c1d84d8f17fa413ba9b845bf46e8e5bb34aa739fb856d4da52a0e4973ab0",
            "file": "projects/sistema/src/app/shared/infrastructure/base-infrastructure.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { environment } from \"projects/sistema/src/environments/environment\";\r\nimport { Observable } from \"rxjs\";\r\nimport { IResultPage } from \"../interface/result-page.interface\";\r\n\r\n\r\nexport abstract class BaseInfraestructure<Entity> {\r\n\r\n    protected httpClient: HttpClient;\r\n\r\n    constructor(private http: HttpClient, private readonly endpoint: string) { }\r\n\r\n    insert(entity: Entity): Observable<any> {\r\n        return this.http.post(`${environment.apiUrl}/${this.endpoint}`, entity);\r\n    }\r\n\r\n    list(): Observable<any> {\r\n        return this.http.get(`${environment.apiUrl}/${this.endpoint}`);\r\n    }\r\n\r\n    listOne(id: number) {\r\n        return this.http.get(`${environment.apiUrl}/${this.endpoint}/${id}`);\r\n    }\r\n\r\n    update(id: number, entity: Entity) {\r\n        return this.http.put(`${environment.apiUrl}/${this.endpoint}/${id}`, entity);\r\n    }\r\n\r\n    delete(id: number) {\r\n        return this.http.delete(`${environment.apiUrl}/${this.endpoint}/${id}`);\r\n    }\r\n\r\n    page(page: number): Observable<IResultPage<Entity>> {\r\n\r\n        return this.http.get<IResultPage<Entity>>(\r\n            `${environment.apiUrl}/${this.endpoint}/page/${page}/${environment.pageSize}`\r\n        );\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "endpoint",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "endpoint",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "httpClient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResultPage<Entity>>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Driver",
            "id": "class-Driver-8f3f16784cffe138526b69e9335327065708ca4415ca23db543d947379a0b0902babd710afb15626a38065c44deb88a9cd57a1aff85f9728fe7da6f81c969495",
            "file": "projects/sistema/src/app/driver/domain/driver.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface DriverRequired {\r\n    nombre: string;\r\n}\r\n\r\nexport interface DriverOpcional {\r\n    id: number;\r\n    activo: boolean\r\n}\r\n\r\nexport type DriverProperties = Required<DriverRequired> & Partial<DriverOpcional>\r\n\r\nexport type DriverUpdate = Partial<{\r\n    nombre: string;\r\n}>\r\n\r\nexport class Driver {\r\n    private readonly id: number;\r\n    private nombre: string;\r\n    private activo: boolean;\r\n\r\n    constructor(properties: DriverProperties) {\r\n        this.activo = true;\r\n        Object.assign(this, properties);\r\n    }\r\n\r\n    properties(): DriverProperties {\r\n        return {\r\n            id: this.id,\r\n            nombre: this.nombre,\r\n            activo: this.activo\r\n        }\r\n    }\r\n\r\n    update(fields: DriverUpdate) {\r\n        Object.assign(this, fields);\r\n    }\r\n\r\n    delete() {\r\n        this.activo = false;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "properties",
                        "type": "DriverProperties",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "properties",
                        "type": "DriverProperties",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "properties",
                    "args": [],
                    "optional": false,
                    "returnType": "DriverProperties",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "fields",
                            "type": "DriverUpdate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "DriverUpdate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DriverFactory",
            "id": "class-DriverFactory-55240213d5ec20ef614c3513a65e564065cc670725372c4f715c7d0a2f60bc7834dc87c306b6965a549e06113a6d2cbdccab92f17085625345e0489297b8db2d",
            "file": "projects/sistema/src/app/driver/domain/driver.factory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Driver, DriverProperties } from \"./driver\";\r\n\r\nexport class DriverFactory {\r\n    create(nombre: string) {\r\n        const DriverProperties: DriverProperties = {\r\n            nombre\r\n        };\r\n\r\n        if (nombre.trim() === '') {\r\n            throw new Error(\"nombre must not be empty\");\r\n        }\r\n        return new Driver(DriverProperties)\r\n    }\r\n}",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "nombre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nombre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Medic",
            "id": "class-Medic-a0c8ef8bc080ef5a0208f2a96ca4d437c0b810f53cfe2bcd5e52f6e38d06a6efb3e46d072f8479671a46cbec35fa85cf2c616df9cac097ff230d8e2ef2701cb3",
            "file": "projects/sistema/src/app/medic/domain/medic.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface MedicRequired {\r\n    nombre: string;\r\n    apellido: string;\r\n    segundo_nombre: string;\r\n    cmp: string;\r\n    correo: string;\r\n    dni: string\r\n    foto: string\r\n}\r\n\r\nexport interface MedicOpcional {\r\n    id: number;\r\n    activo: boolean\r\n}\r\n\r\nexport type MedicProperties = Required<MedicRequired> & Partial<MedicOpcional>\r\n\r\nexport type MedicUpdate = Partial<{\r\n    nombre: string;\r\n    apellido: string;\r\n    segundo_nombre: string;\r\n    cmp: string;\r\n    correo: string;\r\n    dni: string\r\n    foto: string\r\n}>\r\n\r\nexport class Medic {\r\n    private readonly id: number;\r\n    private nombre: string;\r\n    private apellido: string;\r\n    private segundo_nombre: string;\r\n    private cmp: string;\r\n    private correo: string;\r\n    private dni: string;\r\n    private foto: string;\r\n    private activo: boolean;\r\n\r\n    constructor(properties: MedicProperties) {\r\n        this.activo = true;\r\n        Object.assign(this, properties);\r\n    }\r\n\r\n    properties(): MedicProperties {\r\n        return {\r\n            id: this.id,\r\n            nombre: this.nombre,\r\n            apellido: this.apellido,\r\n            segundo_nombre: this.segundo_nombre,\r\n            cmp: this.cmp,\r\n            correo: this.correo,\r\n            dni: this.dni,\r\n            foto: this.foto,\r\n            activo: this.activo\r\n        }\r\n    }\r\n\r\n    update(fields: MedicUpdate) {\r\n        Object.assign(this, fields);\r\n    }\r\n\r\n    delete() {\r\n        this.activo = false;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "properties",
                        "type": "MedicProperties",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "properties",
                        "type": "MedicProperties",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "apellido",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "cmp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dni",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "foto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "segundo_nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "properties",
                    "args": [],
                    "optional": false,
                    "returnType": "MedicProperties",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "fields",
                            "type": "MedicUpdate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "MedicUpdate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MedicFactory",
            "id": "class-MedicFactory-3d1798e551e73f190547ff4b0de8f239cdf4899a8035c4685b4a7e818cb070f94930c0cba2c04eedf3af7bf1debeb60b59c854650fbd9c49c4c615c07ae3241d",
            "file": "projects/sistema/src/app/medic/domain/medic.factory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Medic, MedicProperties } from \"./medic\";\r\n\r\nexport class MedicFactory {\r\n    create(nombre: string, apellido: string, segundo_nombre: string, cmp: string, correo: string, dni: string, foto: string) {\r\n        const MedicProperties: MedicProperties = {\r\n            nombre,\r\n            apellido,\r\n            segundo_nombre,\r\n            cmp,\r\n            correo,\r\n            dni,\r\n            foto,\r\n        };\r\n\r\n        if (nombre.trim() === '') {\r\n            throw new Error(\"nombre must not be empty\");\r\n        }\r\n        if (apellido.trim() === '') {\r\n            throw new Error(\"apellido must not be empty\");\r\n        }\r\n        if (segundo_nombre.trim() === '') {\r\n            throw new Error(\"segundo_nombre must not be empty\");\r\n        }\r\n        if (cmp.trim() === '') {\r\n            throw new Error(\"cmp must not be empty\");\r\n        }\r\n        if (correo.trim() === '') {\r\n            throw new Error(\"correo must not be empty\");\r\n        }\r\n        if (dni.trim() === '') {\r\n            throw new Error(\"dni must not be empty\");\r\n        }\r\n        if (foto.trim() === '') {\r\n            throw new Error(\"foto must not be empty\");\r\n        }\r\n\r\n        return new Medic(MedicProperties)\r\n    }\r\n}",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "nombre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apellido",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "segundo_nombre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cmp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "correo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dni",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "foto",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nombre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apellido",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "segundo_nombre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cmp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "correo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dni",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "foto",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Role",
            "id": "class-Role-80be255597baff1a70a7824eeb0e29fab93e9fe0b1aa2480e212b6ca82ce9d2c38e844016fb3891ca68f352e5dd571621b14fe163de3db580e89c79e0d29f17c",
            "file": "projects/sistema/src/app/roles/domain/role.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface RoleEssential {\r\n    readonly rol: string;\r\n}\r\n\r\nexport interface RoleOptional {\r\n    readonly id: number;\r\n}\r\n\r\nexport type RoleProperties = Required<RoleEssential> & Partial<RoleOptional>\r\n\r\nexport type RoleUpdate = Partial<{ role: string }>\r\n\r\nexport class Role {\r\n    private readonly id: number;\r\n    private rol: string;\r\n\r\n    constructor(properties: RoleProperties) {\r\n        Object.assign(this, properties);\r\n    }\r\n\r\n    properties(): RoleProperties {\r\n        return {\r\n            id: this.id,\r\n            rol: this.rol\r\n        }\r\n\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "properties",
                        "type": "RoleProperties",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "properties",
                        "type": "RoleProperties",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "rol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "properties",
                    "args": [],
                    "optional": false,
                    "returnType": "RoleProperties",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RoleFactory",
            "id": "class-RoleFactory-fc5bbb8dab9245d70aff39829cec08accdbdafba793cf00d5296424e2f8e2b62958eb830c20ab3ab524c2f934b0f38fc5975e94975593faaa13bb03182dff56f",
            "file": "projects/sistema/src/app/roles/domain/role.factory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Role } from \"./role\";\r\n\r\nexport class RoleFactory {\r\n    create(rol: string) {\r\n        if (rol.trim() === '') {\r\n            throw new Error('Rol no puede ser vacio')\r\n        }\r\n        return new Role({ rol });\r\n    }\r\n}",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "rol",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rol",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-bbcc8d5cd7d2054bb60032a43d3587b4ef7308996d5037494e0a6862d847e7a265a8cbdfb15e87150d5298d8335340fcf4159b9bc7b2aefdb8fdd3a70e56ec88",
            "file": "projects/sistema/src/app/user/domain/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface UserRequired {\r\n    nombre: string;\r\n    correo: string;\r\n    password: string;\r\n    roles: any;\r\n}\r\n\r\nexport interface UserOpcional {\r\n    id: number;\r\n    activo: boolean;\r\n\r\n}\r\n\r\nexport type UserProperties = Required<UserRequired> & Partial<UserOpcional>\r\n\r\nexport type UserUpdate = Partial<{\r\n    nombre: string;\r\n    password: string;\r\n    roles: any;\r\n}>\r\n\r\nexport class User {\r\n    private readonly id: number;\r\n    private nombre: string;\r\n    private readonly correo: string;\r\n    private password: string;\r\n    private activo: boolean;\r\n    private roles: any;\r\n\r\n    constructor(properties: UserProperties) {\r\n        this.activo = true;\r\n        Object.assign(this, properties);\r\n    }\r\n\r\n    properties(): UserProperties {\r\n        return {\r\n            id: this.id,\r\n            nombre: this.nombre,\r\n            correo: this.correo,\r\n            password: this.password,\r\n            activo: this.activo,\r\n            roles: this.roles\r\n        }\r\n    }\r\n    update(fields: UserUpdate) {\r\n        Object.assign(this, fields);\r\n    }\r\n\r\n    delete() {\r\n        this.activo = false;\r\n    }\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "properties",
                        "type": "UserProperties",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "properties",
                        "type": "UserProperties",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "properties",
                    "args": [],
                    "optional": false,
                    "returnType": "UserProperties",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "fields",
                            "type": "UserUpdate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "UserUpdate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserFactory",
            "id": "class-UserFactory-848b569ed889d45fe003d0629b4741df2df04873c066ab3af96f6314f3cbe1469b4572ab5d4203a6a961edce1030edef15efa0e0dda1821d6bbd26b3206cdfbc",
            "file": "projects/sistema/src/app/user/domain/user-factory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { User, UserProperties } from \"./user\";\r\n\r\nexport class UserFactory {\r\n\r\n    create(nombre: string, correo: string, password: string, roles: any[]): User {\r\n\r\n        const userProperties: UserProperties = {\r\n            nombre,\r\n            correo,\r\n            password,\r\n            roles,\r\n            id: new Date().getTime(),\r\n        };\r\n\r\n        if (nombre.trim() === \"\") {\r\n            throw new Error(\"El nombre no puede ser vacio\")\r\n        }\r\n\r\n        if (correo.trim() === \"\") {\r\n            throw new Error(\"El correo no puede ser vacio\")\r\n        }\r\n\r\n        if (roles.length === 0) {\r\n            throw new Error(\"Debe de seleccionar al menos un rol\")\r\n        }\r\n\r\n        return new User(userProperties);\r\n    }\r\n}",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "nombre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "correo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roles",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "User",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nombre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "correo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roles",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "RolesAllowedDirective",
            "id": "directive-RolesAllowedDirective-f7307e5369c05dfb6617765431f39c6fd5a64350530232a491b16c3c57bf93fdac59c70731913d4adf57b3abffb586f0ab0b413de9d9209396805f0a14722041",
            "file": "projects/sistema/src/app/shared/directives/roles-allowed.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { AuthApplication } from '../../core/application/auth.application';\nimport { StorageApplication } from '../../core/application/storage.application';\n\n@Directive({\n  selector: '[rolesAllowed]'\n})\nexport class RolesAllowedDirective {\n  @Input(\"rolesAllowed\") roles: string = \"\";\n  rolesAllowed: string[] = [];\n\n  constructor(\n    private readonly storage: StorageApplication,\n    private readonly auth: AuthApplication,\n    private readonly templateRef: TemplateRef<any>,\n    private readonly viewContainer: ViewContainerRef) { }\n\n  ngOnInit() {\n    this.rolesAllowed = this.roles.split(',');\n    this.execute()\n  }\n\n  execute() {\n    const isUserLogged = this.auth.isUserLogged;\n    const rolesUser = this.storage.getFieldToken('roles') as string[];\n    const isUserAuthorized = rolesUser.some(role => this.rolesAllowed.includes(role));\n\n    if (isUserLogged && isUserAuthorized) {\n      this.viewContainer.createEmbeddedView(this.templateRef)\n    } else {\n      this.viewContainer.clear();\n    }\n  }\n}\n",
            "selector": "[rolesAllowed]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "rolesAllowed",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "rolesAllowed",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "UploadDirective",
            "id": "directive-UploadDirective-46dcbc1696d29c67cf1493cc783ecf031af182a46e665759e12de37df87babc98871a6c4e835f5ade7235febf8c7c932c69b9881f0cb804f661be430337dbd26",
            "file": "projects/sistema/src/app/shared/directives/upload.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, EventEmitter, HostListener, Output } from \"@angular/core\";\r\n\r\n@Directive({\r\n    selector: \"[upload]\"\r\n})\r\nexport class UploadDirective {\r\n\r\n    @Output() onHover: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n    @Output() onFileDropped: EventEmitter<File> = new EventEmitter<File>();\r\n\r\n    @HostListener('dragover', ['$event']) onDragOver(event) {\r\n        event.preventDefault();\r\n        this.onHover.emit(true);\r\n    }\r\n\r\n    @HostListener('dragleave', ['$event']) onDragLeave(event) {\r\n        event.preventDefault();\r\n        this.onHover.emit(false);\r\n    }\r\n\r\n    @HostListener('drop', ['$event']) onDrop(event) {\r\n        event.preventDefault();\r\n        this.onHover.emit(false);\r\n        const files = event.dataTransfer.files;\r\n\r\n        if (files.length > 0) {\r\n            const fileSelected: File = files[0]\r\n            this.onFileDropped.emit(fileSelected);\r\n        }\r\n    }\r\n}",
            "selector": "[upload]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onFileDropped",
                    "defaultValue": "new EventEmitter<File>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter<File>"
                },
                {
                    "name": "onHover",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onDragLeave",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-f9c7b3328b4b60b39da957e7f3e7b4e2b78b9cd37df3be96fb5aad645dd0e1e033f5c638616cef9d3c5db52db5d6705981c8ad13dda87f97bbba8b9bbe794dc5",
            "file": "projects/sistema/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isOpened",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "layoutOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILayout",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ILayout } from './config/injections/layout/interface/layout.interface';\nimport { LayoutService } from './config/injections/layout/services/layoutservice';\n\n@Component({\n  selector: 'amb-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  isOpened = true;\n  layoutOptions!: ILayout\n\n  constructor(private readonly layoutService: LayoutService) {\n\n    this.layoutService.configuration.subscribe((config: ILayout) => {\n      this.layoutOptions = config;\n    })\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-sidenav-container,\r\nmat-sidenav-content,\r\nmat-sidenav {\r\n    min-height: 100vh;\r\n}\r\n\r\nmat-sidenav {\r\n    width: 280px;\r\n    background-color: rgb(15, 23, 42);\r\n}\r\n\r\ndiv.logo {\r\n    display: flex;\r\n}\r\n\r\ndiv.logo mat-icon {\r\n    width: 50px;\r\n    height: 50px;\r\n    padding-bottom: 20%;\r\n}",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-sidenav-container>\n\n    <mat-sidenav [opened]=\"isOpened\" mode=\"side\" *ngIf=\"!layoutOptions.hideMenu\">\n        <div class=\"logo\">\n            <mat-icon svgIcon=\"logo\"></mat-icon>\n        </div>\n        <amb-menu></amb-menu>\n    </mat-sidenav>\n\n    <mat-sidenav-content>\n        <amb-header (onToggleMenu)=\"isOpened=!isOpened\" *ngIf=\"!layoutOptions.hideHeader\"></amb-header>\n        <router-outlet></router-outlet>\n    </mat-sidenav-content>\n\n</mat-sidenav-container>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ConfirmComponent",
            "id": "component-ConfirmComponent-7ee0c98ef3f246a6f8e5c180c4ccbf83d2703d7e043f45301d869dcf47c68bc482499f4c01c26a57c80c73763d9457495316e5f83b61f9284828f8ddc435d8a5",
            "file": "projects/sistema/src/app/shared/components/confirm/confirm.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-confirm",
            "styleUrls": [
                "./confirm.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "messageToConfirm",
                    "defaultValue": "\"Are you sure?\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'amb-confirm',\n  templateUrl: './confirm.component.html',\n  styleUrls: ['./confirm.component.css']\n})\nexport class ConfirmComponent implements OnInit {\n\n  messageToConfirm = \"Are you sure?\"\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h3 {\r\n    text-align: center;\r\n}",
                    "styleUrl": "./confirm.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-dialog-content>\n    <h3>{{messageToConfirm}}</h3>\n    <div fxLayout fxLayoutGap=\"15px\" fxLayoutAlign=\"center center\">\n        <button mat-raised-button color=\"accent\" mat-dialog-close=\"yes\"> Yes </button>\n        <button mat-button mat-dialog-close> No </button>\n    </div>\n</mat-dialog-content>"
        },
        {
            "name": "ContainerComponent",
            "id": "component-ContainerComponent-8d2df37a94318a294ca88d777d403c31747339fcfdc7c95ea2af73b05ec0eac66382658efce4fe3384fbe04e08f56efac3d08b5e341608e32445ee8c5aade7ab",
            "file": "projects/sistema/src/app/shared/components/container/container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-container",
            "styleUrls": [
                "./container.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'amb-container',\n  templateUrl: './container.component.html',\n  styleUrls: ['./container.component.css']\n})\nexport class ContainerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    padding: 20px 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    background-color: whitesmoke;\r\n    height: calc(100vh - 190px);\r\n}\r\n\r\nmat-card {\r\n    flex-basis: 95%;\r\n}",
                    "styleUrl": "./container.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n    <mat-card class=\"mat-elevation-z18\">\n        <ng-content>\n            \n        </ng-content>\n    </mat-card>\n</div>\n"
        },
        {
            "name": "CovidComponent",
            "id": "component-CovidComponent-44bc3432cde358ccad05bbabf0d9bc38b69426cc392c3ad3bef6e259746933e642707aa6a00aca09225378a74d082f1b229f8db50938369844a03b2109e34c5d",
            "file": "projects/sistema/src/app/dashboard/views/components/covid/covid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-covid",
            "styleUrls": [
                "./covid.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./covid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataCovid",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Graph[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "schema",
                    "defaultValue": "\"natural\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showLegend",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "showXAxisLabel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "showYAxisLabel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "view",
                    "defaultValue": "[600, 400]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "xAxis",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "xAxisLabel",
                    "defaultValue": "\"Countries\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "yAxis",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "yAxisLabel",
                    "defaultValue": "\"Confirmed cases\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CovidApplication } from '../../../application/covid.application';\nimport { Graph } from '../../../domain/graph.interface';\n\n@Component({\n  selector: 'amb-covid',\n  templateUrl: './covid.component.html',\n  styleUrls: ['./covid.component.css']\n})\nexport class CovidComponent implements OnInit {\n\n  view: [number, number] = [600, 400];\n  schema = \"natural\";\n  xAxis = true;\n  yAxis = true;\n  showXAxisLabel = true;\n  showYAxisLabel = true;\n  showLegend = false;\n  xAxisLabel = \"Countries\";\n  yAxisLabel = \"Confirmed cases\";\n\n  dataCovid: Graph[] = [];\n\n  constructor(private readonly covidApplication: CovidApplication) { }\n\n  ngOnInit(): void {\n    this.covidApplication.getCovidData().subscribe((data: Graph[]) => {\n      this.dataCovid = data;\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./covid.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "covidApplication",
                        "type": "CovidApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "covidApplication",
                        "type": "CovidApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ngx-charts-bar-vertical [view]=\"view\" [results]=\"dataCovid\" [xAxis]=\"xAxis\" [yAxis]=\"yAxis\"\n    [showXAxisLabel]=\"showXAxisLabel\" [showYAxisLabel]=\"showYAxisLabel\" [xAxisLabel]=\"xAxisLabel\"\n    [yAxisLabel]=\"yAxisLabel\" [legend]=\"showLegend\">\n</ngx-charts-bar-vertical>"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-c302426963b65caef86928da1bc2dba955e17e45135bf9e61c808626d55b7f7a5478001ceada46814bdfef53f30668ca62eb5daac2159b4ed121c5ba9d43c13d",
            "file": "projects/sistema/src/app/dashboard/views/pages/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-dashboard",
            "styleUrls": [
                "./dashboard.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'amb-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dashboard.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<amb-title></amb-title>\n<amb-container>\n    <div fxLayout fxLayout.lt-md=\"column\" fxLayoutAlign=\"space-between\">\n        <amb-covid></amb-covid>\n        <amb-socket></amb-socket>\n    </div>\n</amb-container>"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-bd80a0977b746d19199ac3c102f2481892b5cd637790fedababfd8a04e011d276dca9d6066d28f10d52c9973bf392adeb58354ce5d060c280f36a219d629b896",
            "file": "projects/sistema/src/app/history/views/components/form/form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-form",
            "styleUrls": [
                "./form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'amb-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css']\n})\nexport class FormComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>form works!</p>\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-c0e063038e1bee14714e1051c232f9a9cd58a9b9228a289bf2aa818bfc9f2f686f1858bc742f12e8e4a8bdd899c06ca0930a97da9bfd2848bb78fd4256ebbd45-1",
            "file": "projects/sistema/src/app/driver/views/components/form/form.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-form",
            "styleUrls": [
                "./form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "loadForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'amb-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class FormComponent implements OnInit {\n  title: string;\n  group: FormGroup;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private reference: MatDialogRef<FormComponent>\n  ) {\n    this.title = data ? 'EDIT' : 'ADD';\n  }\n\n  ngOnInit(): void {\n    this.loadForm();\n  }\n\n  loadForm() {\n    this.group = new FormGroup({\n      id: new FormControl(this.data?.id),\n      nombre: new FormControl(this.data?.nombre, Validators.required)\n    });\n\n  }\n\n  save() {\n    const values = this.group.value;\n    const driverId = values.id;\n    delete values.id;\n\n    this.reference.close({ id: driverId, record: values });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-modal-medic {\r\n    width: 600px;\r\n}\r\n\r\n.form-modal-medic .mat-dialog-container {\r\n    padding: 0 !important;\r\n}\r\n\r\n.form-modal-medic .mat-dialog-content {\r\n    padding: 24px;\r\n    margin: 0;\r\n}",
                    "styleUrl": "./form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "FormComponent-1",
            "templateData": "<mat-toolbar fxLayout fxLayoutAlign=\"space-between center\">\n    <h3>{{title}}</h3>\n    <button mat-icon-button mat-dialog-close>\n        <mat-icon>close</mat-icon>\n    </button>\n</mat-toolbar>\n<mat-dialog-content>\n    <form fxLayout=\"column\" [formGroup]=\"group\">\n        <mat-form-field appearance=\"outline\">\n            <mat-label>Nombre</mat-label>\n            <input type=\"text\" matInput formControlName=\"nombre\">\n        </mat-form-field>\n        <div fxLayout fxLayoutAlign=\"end\" fxLayoutGap=\"10px\">\n            <button mat-raised-button color=\"primary\" type=\"button\" [disabled]=\"group.invalid\"\n                (click)=\"save()\">Save</button>\n            <button mat-button color=\"primary\" type=\"button\" mat-dialog-close>Cancel</button>\n        </div>\n    </form>\n</mat-dialog-content>"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-a51abfce5eeb6f931c26e4c0e50dd189957afbad551c8c32aad6af4fffd39f3e6dd7b0c5190d111540154a365be175cef3f3a78bb782ac1ab56e61927a78a5e5-2",
            "file": "projects/sistema/src/app/medic/views/components/form/form.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-form",
            "styleUrls": [
                "./form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "photoToShow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "loadForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'amb-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class FormComponent implements OnInit {\n  title: string;\n  group: FormGroup;\n  photoToShow: string;\n\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private reference: MatDialogRef<FormComponent>\n  ) {\n    this.title = data ? 'EDIT' : 'ADD';\n  }\n\n  ngOnInit(): void {\n    this.loadForm();\n  }\n\n  loadForm() {\n    this.group = new FormGroup({\n      id: new FormControl(this.data?.id),\n      nombre: new FormControl(this.data?.nombre, Validators.required),\n      segundo_nombre: new FormControl(\n        this.data?.segundo_nombre,\n        Validators.required\n      ),\n      apellido: new FormControl(this.data?.apellido, Validators.required),\n      cmp: new FormControl(this.data?.cmp, Validators.required),\n      dni: new FormControl(this.data?.dni, Validators.required),\n      correo: new FormControl(this.data?.correo, [\n        Validators.required,\n        Validators.email,\n      ]),\n    });\n\n    if (this.data) {\n      this.group.addControl('foto', new FormControl());\n      this.photoToShow = this.data.foto ? this.data.foto : '';\n    } else {\n      this.group.addControl('foto', new FormControl(null, Validators.required));\n    }\n  }\n\n  save() {\n    const values = this.group.value;\n    const medicId = values.id;\n    delete values.id;\n\n    const fd = new FormData();\n\n    for (const key of Object.keys(values)) {\n      if (key === 'foto' && values[key]) {\n        fd.append(key, values[key]);\n      } else if (key !== 'foto') {\n        fd.append(key, values[key]);\n      }\n    }\n\n    this.reference.close({ id: medicId, record: fd });\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-modal-medic {\r\n    width: 600px;\r\n}\r\n\r\n.form-modal-medic .mat-dialog-container {\r\n    padding: 0 !important;\r\n}\r\n\r\n.form-modal-medic .mat-dialog-content {\r\n    padding: 24px;\r\n    margin: 0;\r\n}",
                    "styleUrl": "./form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "FormComponent-2",
            "templateData": "<mat-toolbar fxLayout fxLayoutAlign=\"space-between center\">\n    <h3>{{title}}</h3>\n    <button mat-icon-button mat-dialog-close>\n        <mat-icon>close</mat-icon>\n    </button>\n</mat-toolbar>\n<mat-dialog-content>\n    <form fxLayout=\"column\" [formGroup]=\"group\">\n        <div fxLayout fxLayoutGap=\"10px\">\n            <div fxLayout=\"column\" fxFlex=\" 1 1 33%\">\n                <amb-photo formControlName=\"foto\" [photoByDefault]=\"photoToShow\"></amb-photo>\n            </div>\n            <div fxLayout=\"column\" fxFlex=\" 1 1 33%\">\n                <mat-form-field appearance=\"outline\">\n                    <mat-label>Nombre</mat-label>\n                    <input type=\"text\" matInput formControlName=\"nombre\">\n                </mat-form-field>\n                <mat-form-field appearance=\"outline\">\n                    <mat-label>Segundo Nombre</mat-label>\n                    <input type=\"text\" matInput formControlName=\"segundo_nombre\">\n                </mat-form-field>\n                <mat-form-field appearance=\"outline\">\n                    <mat-label>Apellido</mat-label>\n                    <input type=\"text\" matInput formControlName=\"apellido\">\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"column\" fxFlex=\" 1 1 33%\">\n                <mat-form-field appearance=\"outline\">\n                    <mat-label>CMP</mat-label>\n                    <input type=\"text\" matInput formControlName=\"cmp\">\n                </mat-form-field>\n                <mat-form-field appearance=\"outline\">\n                    <mat-label>DNI</mat-label>\n                    <input type=\"text\" matInput formControlName=\"dni\">\n                </mat-form-field>\n                <mat-form-field appearance=\"outline\">\n                    <mat-label>Correo</mat-label>\n                    <input type=\"text\" matInput formControlName=\"correo\">\n                </mat-form-field>\n            </div>\n        </div>\n        <div fxLayout fxLayoutAlign=\"end\" fxLayoutGap=\"10px\">\n            <button mat-raised-button color=\"primary\" type=\"button\" [disabled]=\"group.invalid\"\n                (click)=\"save()\">Save</button>\n            <button mat-button color=\"primary\" type=\"button\" mat-dialog-close>Cancel</button>\n        </div>\n    </form>\n</mat-dialog-content>"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-dab3de1e46a71faaa302adabedac00916a89a0a44cd2c6f1c6123418f852bbaf2e3948994d1cca4f794674bf5b8104fc81132184989ee90c48acd79bebc923d0-3",
            "file": "projects/sistema/src/app/user/views/components/form/form.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-form",
            "styleUrls": [
                "./form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RoleProperties[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subscriptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "loadRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { RoleApplication } from 'projects/sistema/src/app/roles/application/role.application';\nimport { RoleProperties } from 'projects/sistema/src/app/roles/domain/role';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'amb-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class FormComponent implements OnInit {\n\n  group: FormGroup;\n  title: String;\n  roles: RoleProperties[];\n  subscriptions: Subscription;\n\n  constructor(private readonly reference: MatDialogRef<FormComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any, private readonly roleApplication: RoleApplication) {\n\n    //private readonly referenece: MatDialogRef<FormComponent>, @Inject(MAT_DIALOG_DATA) public data: any\n\n    this.title = this.data ? \"Edit\" : \"Add\"\n    this.group = new FormGroup({\n      id: new FormControl(this.data?.id),\n      nombre: new FormControl(this.data?.nombre, [\n        Validators.required,\n        //  Validators.pattern(/[a-zA-Z]+$/)\n      ]),\n      correo: new FormControl(this.data?.correo, [Validators.required, Validators.email]),\n      roles: new FormControl(this.data?.roles.map(role => role.id))\n    })\n\n    if (this.data) {\n      this.group.addControl('password', new FormControl(''))\n    } else {\n      this.group.addControl('password', new FormControl('', Validators.required))\n    }\n  }\n\n  ngOnInit(): void {\n    this.loadRoles()\n  }\n\n  loadRoles() {\n    this.subscriptions = this.roleApplication.list().subscribe(data => {\n      this.roles = data;\n    })\n  }\n\n  save() {\n\n    const values = this.group.value;\n    const userId = values.id;\n    delete values.id;\n    if (!values.password) {\n      delete values.password;\n    }\n\n    this.reference.close({ id: userId, record: values });\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-modal-medic {\r\n    width: 600px;\r\n}\r\n\r\n.form-modal-medic .mat-dialog-container {\r\n    padding: 0 0 10px 0 !important;\r\n}\r\n\r\n.form-modal-medic .mat-dialog-content {\r\n    margin: 0% !important;\r\n    padding-top: 15px;\r\n}\r\n\r\n/*\r\n@media screen and (max-width: 700px) {\r\n\r\n    .form-modal {\r\n        width: 500px;\r\n    }\r\n\r\n}*/",
                    "styleUrl": "./form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "roleApplication",
                        "type": "RoleApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "roleApplication",
                        "type": "RoleApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "FormComponent-3",
            "templateData": "<mat-toolbar fxLayout fxLayoutAlign=\"space-between center\">\n    <h3>{{title}}</h3>\n    <button mat-icon-button mat-dialog-close>\n        <mat-icon>close</mat-icon>\n    </button>\n</mat-toolbar>\n<mat-dialog-content>\n    <form fxLayout=\"column\" [formGroup]=\"group\">\n        <mat-form-field appearance=\"outline\">\n            <mat-label>Nombre</mat-label>\n            <input type=\"text\" matInput formControlName=\"nombre\">\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n            <mat-label>Correo</mat-label>\n            <input type=\"text\" matInput formControlName=\"correo\">\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n            <mat-label>Contraseña</mat-label>\n            <input type=\"password\" matInput formControlName=\"password\">\n            <mat-hint>Dejar en blanco si no desea cambiar la contraseña</mat-hint>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n            <mat-label>Roles</mat-label>\n            <mat-select multiple formControlName=\"roles\">\n                <mat-option *ngFor=\"let role of roles\" [value]=\"role.id\">{{role.rol}}</mat-option>\n            </mat-select>\n        </mat-form-field>\n        <div fxLayout fxLayoutAlign=\"end\" fxLayoutGap=\"10px\">\n            <button mat-raised-button color=\"primary\" type=\"button\" [disabled]=\"group.invalid\"\n                (click)=\"save()\">Save</button>\n            <button mat-button color=\"primary\" type=\"button\" mat-dialog-close>Cancel</button>\n        </div>\n    </form>\n</mat-dialog-content>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-b60433b070c11bd0c9db8dda2779a8214f63f15953ea4b2c2124069a0b7b4f8ed25d5b41ad3d0ff545318b337fac8df0e88aefeb094932c727beb7e1c26d63ab-1",
            "file": "projects/sistema/src/app/core/views/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onToggleMenu",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "username",
                    "defaultValue": "\"Juan Crespo\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toogleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { AuthApplication } from '../../../application/auth.application';\nimport { StorageApplication } from '../../../application/storage.application';\n\n@Component({\n  selector: 'amb-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  username = \"Juan Crespo\";\n\n  @Output() onToggleMenu: EventEmitter<void> = new EventEmitter()\n\n  constructor(private readonly auth: AuthApplication, readonly storage: StorageApplication) {\n    this.username = storage.getFieldToken('name') as string;\n  }\n\n  ngOnInit(): void {\n  }\n\n  toogleMenu() {\n    this.onToggleMenu.emit();\n  }\n\n  logout() {\n    this.auth.logout();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-toolbar {\r\n    background-color: white !important;\r\n    border-bottom: 2px solid #6b6b6b2b;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    height: 70px;\r\n}\r\n\r\n.profile {\r\n    height: 100%;\r\n}\r\n\r\n.profile img {\r\n    max-width: 45px;\r\n    border-radius: 45%;\r\n    border: 1px solid #6b6b6b2b;\r\n    margin-right: 10px;\r\n}",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storage",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storage",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<mat-toolbar>\n    <button mat-icon-button color=\"primary\" (click)=\"toogleMenu()\">\n        <mat-icon>menu</mat-icon>\n    </button>\n\n    <button mat-button class=\"profile\" [matMenuTriggerFor]=\"menuVertical\">\n        <img src=\"assets/img/avatar/user.png\" alt=\"\" />\n        <span>{{username}}</span>\n        <mat-icon>keyboard_arrow_down</mat-icon>\n    </button>\n    <mat-menu #menuVertical>\n        <button mat-menu-item>\n            <mat-icon>lock</mat-icon>\n            <span>Bloquear Session</span>\n        </button>\n        <button mat-menu-item (click)=\"logout()\">\n            <mat-icon>logout</mat-icon>\n            <span>Cerrar Session</span>\n        </button>\n    </mat-menu>\n</mat-toolbar>"
        },
        {
            "name": "KeypadComponent",
            "id": "component-KeypadComponent-3a87fbe94f82f4202ea84645dde5caed063fa64f1cd1a26e9b4ee241096f85e17e0953388c1ebb16d17c30aee9417c1d9506bcf84f2e29475f70fc4c3181c256",
            "file": "projects/sistema/src/app/shared/components/keypad/keypad.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-keypad",
            "styleUrls": [
                "./keypad.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./keypad.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onExport",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'amb-keypad',\n  templateUrl: './keypad.component.html',\n  styleUrls: ['./keypad.component.css']\n})\nexport class KeypadComponent implements OnInit {\n\n  @Output() onExport = new EventEmitter<string>();\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  export(type: string) {\n    this.onExport.emit(type);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./keypad.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout fxLayoutGap=\"10px\">\n    <button mat-flat-button color=\"primary\" (click)=\"export('excel')\">\n        <div fxLayout fxLayoutAlign=\"space-between center\" fxLayoutGap=\"10px\">\n            <span>Export to Excel</span>\n            <mat-icon svgIcon=\"excel\"></mat-icon>\n        </div>\n    </button>\n    <button mat-flat-button color=\"warn\" (click)=\"export('pdf')\">\n        <div fxLayout fxLayoutAlign=\"space-between center\" fxLayoutGap=\"10px\">\n            <span>Export to PDF</span>\n            <mat-icon svgIcon=\"pdf\"></mat-icon>\n        </div>\n    </button>\n</div>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-8ac054c6cf4f0565cd8b6342c7274c5a497573a565b535f86c642665042b87cd703142e2b452148ec876184b827e5056268517216a7860b617873592577b3d3c",
            "file": "projects/sistema/src/app/core/views/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-login",
            "styleUrls": [
                "./login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthApplication } from '../../../application/auth.application';\nimport { AuthFactory } from '../../../domain/auth.factory';\n\n@Component({\n  selector: 'amb-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  group: FormGroup;\n\n  constructor(\n    private readonly router: Router,\n    private readonly authApplication: AuthApplication) {\n    this.group = new FormGroup({\n      correo: new FormControl(null, [Validators.required, Validators.email]),\n      password: new FormControl(null, [Validators.required])\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  login() {\n\n    const values = this.group.value;\n    const auth = AuthFactory.create(values.correo, values.password);\n\n    this.authApplication.login(auth)\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    width: 80%;\r\n    display: block;\r\n}\r\n\r\nh1,\r\nh2 {\r\n    text-align: center;\r\n}",
                    "styleUrl": "./login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authApplication",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authApplication",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form fxLayout=\"column\" [formGroup]=\"group\">\n    <h1>Sistemas de Historia</h1>\n    <h2>Credenciales</h2>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Ingrese su correo</mat-label>\n        <input type=\"text\" matInput formControlName=\"correo\">\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Contraseña</mat-label>\n        <input type=\"password\" matInput formControlName=\"password\">\n    </mat-form-field>\n    <button mat-raised-button type=\"button\" color=\"primary\" (click)=\"login()\"\n        [disabled]=\"group.invalid\">Ingresar</button>\n</form>"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-c805ba2f20bf83abea2365c4de19759a8d57fed6b1859447cc557b6b73b3e474a601edcc84782171ae0cc030275e5179922b5b7ff421dedeac2f568f8b137249",
            "file": "projects/sistema/src/app/core/views/components/menu/menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-menu",
            "styleUrls": [
                "./menu.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Menu, MenuService } from 'projects/sistema/src/app/shared/service/menu.service';\n\n@Component({\n  selector: 'amb-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MenuComponent implements OnInit {\n\n  public menu: Menu[];\n\n  constructor(private readonly menuService: MenuService) {\n    this.menu = menuService.getItems();\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-nav-list mat-list-item a {\r\n    transition: 0.3s background-color;\r\n}\r\n\r\nmat-nav-list mat-list-item a,\r\nmat-nav-list mat-list-item a:link,\r\nmat-nav-list mat-list-item a:visited,\r\nmat-nav-list mat-list-item a:active {\r\n    color: rgba(255, 255, 255, 0.5) !important;\r\n    font-size: 13px;\r\n    font-weight: 500;\r\n    display: block;\r\n    width: 100%;\r\n    padding: 0 20px;\r\n}\r\n\r\n\r\nmat-nav-list mat-list-item a:hover {\r\n    color: white !important;\r\n    background-color: rgba(255, 255, 255, 0.445);\r\n}\r\n\r\nmat-list-item span.mat-list-item-content {\r\n    padding: 0 !important;\r\n}\r\n\r\nmat-list-item span.title {\r\n    padding-left: 15px;\r\n}",
                    "styleUrl": "./menu.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-nav-list>\n    <mat-list-item *ngFor=\"let menuItem of menu\">\n        <a routerLink=\"{{ menuItem.url }}\" routerLinkActive=\"activeLink\">\n            <button mat-icon-button>\n                <mat-icon svgIcon=\"{{ menuItem.icon }}\"></mat-icon>\n                <span class=\"title\">{{ menuItem.title }}</span>\n            </button>\n        </a>\n    </mat-list-item>\n</mat-nav-list>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageListComponent",
            "id": "component-PageListComponent-217c76e3f2d3341329ba958d1fd424e804e00724c839eab1cf275aba7f22c7a8581bf2ca6cbc97a59ca2214c67aadf9ce550fa28745c5aeadd82e44223c6fc4d",
            "file": "projects/sistema/src/app/driver/views/pages/page-list/page-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-list",
            "styleUrls": [
                "./page-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "listFields",
                    "defaultValue": "[\"id\", \"nombre\", \"apellido\", \"cmp\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "metaColumns",
                    "defaultValue": "[\n    { field: \"id\", title: \"ID\" },\n    { field: \"nombre\", title: \"Nombre\" }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "application",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Application",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "dataSource",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "fileName",
                    "defaultValue": "'data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "pageSize",
                    "defaultValue": "environment.pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "quantityRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "sheetName",
                    "defaultValue": "'Sheet1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "titleReport",
                    "defaultValue": "'Titulo Reporte'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "fillDataSource",
                    "args": [
                        {
                            "name": "result",
                            "type": "IResultPage<Entity>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "IResultPage<Entity>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getRecordsByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "showModalWindow",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { BaseComponent } from 'projects/sistema/src/app/shared/components/base/base-component';\nimport { MetaColumn } from 'projects/sistema/src/app/shared/interfaces/metacolumn.interface';\nimport { UtilsService } from 'projects/sistema/src/app/shared/service/utils.service';\nimport { DriverApplication } from '../../../application/driver.application';\nimport { Driver } from '../../../domain/driver';\nimport { FormComponent } from '../../components/form/form.component';\n\n@Component({\n  selector: 'amb-page-list',\n  templateUrl: './page-list.component.html',\n  styleUrls: ['./page-list.component.css']\n})\nexport class PageListComponent extends BaseComponent<Driver, DriverApplication, FormComponent> {\n\n  listFields: string[] = [\"id\", \"nombre\", \"apellido\", \"cmp\"];\n\n  metaColumns: MetaColumn[] = [\n    { field: \"id\", title: \"ID\" },\n    { field: \"nombre\", title: \"Nombre\" }\n  ];\n\n  constructor(\n    protected driverApplication: DriverApplication,\n    protected override readonly utilsService: UtilsService) {\n    super(driverApplication, utilsService, FormComponent);\n    this.fileName = \"Drivers\";\n    this.sheetName = \"List\";\n    this.titleReport = \"Drivers\";\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "driverApplication",
                        "type": "DriverApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "driverApplication",
                        "type": "DriverApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<amb-title>\n    <button mat-flat-button color=\"primary\" btnAction (click)=\"showModalWindow()\">\n        <mat-icon>add</mat-icon>\n        Add Driver\n    </button>\n</amb-title>\n<amb-container>\n    <perfect-scrollbar class=\"heightMaxPerfectScrollbar\">\n        <amb-table [metaColumns]=\"metaColumns\" [dataSource]=\"dataSource\">\n            <ng-container matColumnDef=\"actions\">\n                <th mat-header-cell *matHeaderCellDef>#####</th>\n                <td mat-cell *matCellDef=\"let row\" class=\"text-align-right \">\n                    <button mat-stroked-button color=\"primary\" (click)=\"showModalWindow(row)\">\n                        <mat-icon>edit</mat-icon>\n                    </button>\n                    <button mat-stroked-button color=\"accent\" (click)=\"delete(row)\">\n                        <mat-icon>delete</mat-icon>\n                    </button>\n                </td>\n            </ng-container>\n        </amb-table>\n    </perfect-scrollbar>\n    <div fxLayout fxLayoutAlign=\"space-between center\">\n        <amb-keypad (onExport)=\"export($event)\"></amb-keypad>\n        <amb-paginator [length]=\"quantityRecords\" [pageSize]=\"pageSize\" (onChangePage)=\"getRecordsByPage($event)\">\n        </amb-paginator>\n    </div>\n\n</amb-container>"
        },
        {
            "name": "PageListComponent",
            "id": "component-PageListComponent-ab3f73fe8ef2d463df6e01c7029e488d6ad141fe0a645d685e4d109929ff22c5b99eea8f310adef52a710038f955489d7ebe3306422fa120c87b3e4110fcdbbc-1",
            "file": "projects/sistema/src/app/history/views/page/page-list/page-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-list",
            "styleUrls": [
                "./page-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'amb-page-list',\n  templateUrl: './page-list.component.html',\n  styleUrls: ['./page-list.component.css']\n})\nexport class PageListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "PageListComponent-1",
            "templateData": "<amb-title>\n    <button mat-flat-button color=\"primary\" btnAction>\n        <mat-icon>add</mat-icon>\n        Add History\n    </button>\n</amb-title>\n<amb-container>\n    <amb-table></amb-table>\n</amb-container>"
        },
        {
            "name": "PageListComponent",
            "id": "component-PageListComponent-0679c832f3689891c9afca41534dfaae355970e8073d6afbb72cd625d534fe8840e0467eee94df60be4d206a333c30aca63daf5337de1abc009c5915450421cb-2",
            "file": "projects/sistema/src/app/medic/views/pages/page-list/page-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-list",
            "styleUrls": [
                "./page-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "listFields",
                    "defaultValue": "[\"id\", \"nombre\", \"apellido\", \"cmp\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "metaColumns",
                    "defaultValue": "[\n    { field: \"id\", title: \"ID\" },\n    { field: \"nombre\", title: \"Nombre\" },\n    { field: \"apellido\", title: \"Apellido\" },\n    { field: \"cmp\", title: \"CMP\" },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "application",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Application",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "dataSource",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "fileName",
                    "defaultValue": "'data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "pageSize",
                    "defaultValue": "environment.pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "quantityRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "sheetName",
                    "defaultValue": "'Sheet1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "titleReport",
                    "defaultValue": "'Titulo Reporte'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "fillDataSource",
                    "args": [
                        {
                            "name": "result",
                            "type": "IResultPage<Entity>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "IResultPage<Entity>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getRecordsByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "showModalWindow",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { BaseComponent } from 'projects/sistema/src/app/shared/components/base/base-component';\nimport { MetaColumn } from 'projects/sistema/src/app/shared/interfaces/metacolumn.interface';\nimport { MedicApplication } from '../../../application/medic.application';\nimport { Medic } from '../../../domain/medic';\nimport { FormComponent } from '../../components/form/form.component';\nimport { UtilsService } from 'projects/sistema/src/app/shared/service/utils.service';\n\n@Component({\n  selector: 'amb-page-list',\n  templateUrl: './page-list.component.html',\n  styleUrls: ['./page-list.component.css']\n})\n\n\nexport class PageListComponent extends BaseComponent<Medic, MedicApplication, FormComponent> {\n  listFields: string[] = [\"id\", \"nombre\", \"apellido\", \"cmp\"];\n\n  metaColumns: MetaColumn[] = [\n    { field: \"id\", title: \"ID\" },\n    { field: \"nombre\", title: \"Nombre\" },\n    { field: \"apellido\", title: \"Apellido\" },\n    { field: \"cmp\", title: \"CMP\" },\n  ];\n\n  constructor(protected medicApplication: MedicApplication, protected override readonly utilsService: UtilsService) {\n    super(medicApplication, utilsService, FormComponent);\n    this.fileName = \"Medics\";\n    this.sheetName = \"List\";\n    this.titleReport = \"Medics\";\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-form {\r\n    min-width: 150px;\r\n    max-width: 900px;\r\n    width: 100%;\r\n}\r\n\r\n.example-full-width {\r\n    width: 100%;\r\n    height: 20px !important;\r\n}\r\n\r\nmat-sidenav {\r\n    width: 80%;\r\n}",
                    "styleUrl": "./page-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "medicApplication",
                        "type": "MedicApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "medicApplication",
                        "type": "MedicApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "PageListComponent-2",
            "templateData": "<amb-title>\n    <button mat-flat-button color=\"primary\" btnAction (click)=\"showModalWindow()\" *rolesAllowed=\"'MEDIC'\">\n        <mat-icon>add</mat-icon>\n        Add Medic\n    </button>\n</amb-title>\n<amb-container>\n    <perfect-scrollbar class=\"heightMaxPerfectScrollbar\">\n        <amb-table [metaColumns]=\"metaColumns\" [dataSource]=\"dataSource\">\n            <ng-container matColumnDef=\"actions\">\n                <th mat-header-cell *matHeaderCellDef>#####</th>\n                <td mat-cell *matCellDef=\"let row\" class=\"text-align-right \">\n                    <button mat-stroked-button color=\"primary\" (click)=\"showModalWindow(row)\"\n                        *rolesAllowed=\"'MEDIC,ADMIN'\">\n                        <mat-icon>edit</mat-icon>\n                    </button>\n                    <button mat-stroked-button color=\"accent\" (click)=\"delete(row)\" *rolesAllowed=\"'AUDITOR,OPERATOR'\">\n                        <mat-icon>delete</mat-icon>\n                    </button>\n                </td>\n            </ng-container>\n        </amb-table>\n    </perfect-scrollbar>\n    <div fxLayout fxLayoutAlign=\"space-between center\">\n        <amb-keypad (onExport)=\"export($event)\"></amb-keypad>\n        <amb-paginator [length]=\"quantityRecords\" [pageSize]=\"pageSize\" (onChangePage)=\"getRecordsByPage($event)\">\n        </amb-paginator>\n    </div>\n\n</amb-container>"
        },
        {
            "name": "PageListComponent",
            "id": "component-PageListComponent-16a2f5d86e64a8a9f94db0cfec40a55e720b155ace2fb01ea9168c871e6de8d4c16be311241064a6de7c5e92a238c5bd9309d1625294c1e84272e4d3122396cd-3",
            "file": "projects/sistema/src/app/user/views/pages/page-list/page-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-list",
            "styleUrls": [
                "./page-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "listFields",
                    "defaultValue": "[\n    \"id\", \"name\", \"lastname\", \"mcmp\"\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "metaColumns",
                    "defaultValue": "[\n    { field: \"id\", title: \"ID\" },\n    { field: \"nombre\", title: \"Nombre\" },\n    { field: \"correo\", title: \"Correo\" }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "application",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Application",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "dataSource",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "fileName",
                    "defaultValue": "'data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "pageSize",
                    "defaultValue": "environment.pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "quantityRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "sheetName",
                    "defaultValue": "'Sheet1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "titleReport",
                    "defaultValue": "'Titulo Reporte'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "fillDataSource",
                    "args": [
                        {
                            "name": "result",
                            "type": "IResultPage<Entity>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "IResultPage<Entity>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getRecordsByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "showModalWindow",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { BaseComponent } from 'projects/sistema/src/app/shared/components/base/base-component';\nimport { MetaColumn } from 'projects/sistema/src/app/shared/interfaces/metacolumn.interface';\nimport { UtilsService } from 'projects/sistema/src/app/shared/service/utils.service';\nimport { UserApplication } from '../../../application/user.application';\nimport { User } from '../../../domain/user';\nimport { FormComponent } from '../../components/form/form.component';\n\n@Component({\n  selector: 'amb-page-list',\n  templateUrl: './page-list.component.html',\n  styleUrls: ['./page-list.component.css']\n})\nexport class PageListComponent extends BaseComponent<\n  User,\n  UserApplication,\n  FormComponent\n>  {\n\n  listFields: Array<string> = [\n    \"id\", \"name\", \"lastname\", \"mcmp\"\n  ];\n\n  metaColumns: MetaColumn[] = [\n    { field: \"id\", title: \"ID\" },\n    { field: \"nombre\", title: \"Nombre\" },\n    { field: \"correo\", title: \"Correo\" }\n  ];\n\n  constructor(\n    protected override readonly utilsService: UtilsService,\n    protected readonly userApplication: UserApplication\n  ) {\n    super(userApplication, utilsService, FormComponent);\n    this.fileName = \"Users\";\n    this.sheetName = \"List\";\n    this.titleReport = \"Users\";\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userApplication",
                        "type": "UserApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userApplication",
                        "type": "UserApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "PageListComponent-3",
            "templateData": "<amb-title>\n    <button mat-flat-button color=\"primary\" btnAction (click)=\"showModalWindow()\">\n        <mat-icon>add</mat-icon>\n        Add User\n    </button>\n</amb-title>\n<amb-container>\n    <perfect-scrollbar class=\"heightMaxPerfectScrollbar\">\n        <amb-table [metaColumns]=\"metaColumns\" [dataSource]=\"dataSource\">\n            <ng-container matColumnDef=\"actions\">\n                <th mat-header-cell *matHeaderCellDef>#####</th>\n                <td mat-cell *matCellDef=\"let row\" class=\"text-align-right \">\n                    <button mat-stroked-button color=\"primary\" (click)=\"showModalWindow(row)\">\n                        <mat-icon>edit</mat-icon>\n                    </button>\n                    <button mat-stroked-button color=\"accent\" (click)=\"delete(row)\">\n                        <mat-icon>delete</mat-icon>\n                    </button>\n                </td>\n            </ng-container>\n        </amb-table>\n    </perfect-scrollbar>\n    <div fxLayout fxLayoutAlign=\"space-between center\">\n        <amb-keypad (onExport)=\"export($event)\"></amb-keypad>\n        <amb-paginator [length]=\"quantityRecords\" [pageSize]=\"pageSize\" (onChangePage)=\"getRecordsByPage($event)\">\n        </amb-paginator>\n    </div>\n</amb-container>"
        },
        {
            "name": "PageLoginComponent",
            "id": "component-PageLoginComponent-a89f04c1e60aac191cd0ddbe9cafd3062d918bd68f0c7de462d970d8b040d6b72161abecd4216258058dc35909aea5520466fcf41efd4a04a904ea4911aaeebd",
            "file": "projects/sistema/src/app/core/views/pages/page-login/page-login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-login",
            "styleUrls": [
                "./page-login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { LayoutService } from 'projects/sistema/src/app/config/injections/layout/services/layoutservice';\n\n@Component({\n  selector: 'amb-page-login',\n  templateUrl: './page-login.component.html',\n  styleUrls: ['./page-login.component.css']\n})\nexport class PageLoginComponent implements OnInit {\n\n  constructor(private readonly layoutService: LayoutService) {\n    //this.layoutService.setConfiguration({ hideHeader: true, hideMenu: true });\n    this.layoutService.configuration = { hideHeader: true, hideMenu: true }\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngOnDestroy(): void {\n    this.layoutService.configuration = { hideHeader: false, hideMenu: false }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    background-image: url(/assets/img/background-new.jpg);\r\n    height: 100vh;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n}\r\n\r\n.info {\r\n    padding-left: 50px;\r\n}\r\n\r\nh1 {\r\n    color: white;\r\n}\r\n\r\n.login {\r\n    background-color: white;\r\n}",
                    "styleUrl": "./page-login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout fxLayoutAlign=\"space-between\" class=\"container\">\n    <div fxLayout=\"column\" fxLayoutAlign=\"center\" fxFlex=\"1 1 70%\" class=\"info\">\n        <lottie-player autoplay loop speed=\"1\" src=\"/assets/lotties/lottie.json\" style=\"width: 500px\">\n        </lottie-player>\n\n    </div>\n\n    <div fxFlex=\"1 1 30%\" fxLayout fxLayoutAlign=\"center center\" class=\"login\">\n        <amb-login></amb-login>\n    </div>\n</div>"
        },
        {
            "name": "PaginatorComponent",
            "id": "component-PaginatorComponent-1aa9eec862c70e6984a98f7bbf4e34d5b4988246962a3ad0ee2cfc4702249d1b94bb72ea65873d97bc557dd6454b37d28dad8038e4f2d0f88a7094f9e8f20eb7",
            "file": "projects/sistema/src/app/shared/components/paginator/paginator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-paginator",
            "styleUrls": [
                "./paginator.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./paginator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "length",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageSize",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChangePage",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "pageEvent",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageEvent",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { PageEvent } from '@angular/material/paginator';\n\n@Component({\n  selector: 'amb-paginator',\n  templateUrl: './paginator.component.html',\n  styleUrls: ['./paginator.component.css']\n})\nexport class PaginatorComponent implements OnInit {\n\n  @Input() length: number = 0;\n  @Input() pageSize: number = 0;\n  @Output() onChangePage: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor() { }\n\n  ngOnInit(): void { }\n\n  changePage(pageEvent: PageEvent) {\n    this.onChangePage.emit(pageEvent.pageIndex);\n    console.log('pageIndex', pageEvent.pageIndex);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./paginator.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-paginator [length]=\"length\" [pageSize]=\"pageSize\" (page)=\"changePage($event)\" showFirstLastButtons=\"true\">\n</mat-paginator>"
        },
        {
            "name": "PhotoComponent",
            "id": "component-PhotoComponent-13f0201568fe4db4ce92ddaca5f8500f750aea8ab7e95603f4f928c47d570c359137eb6e02f5c3970385b1c873b4f5c83a6f823e2c7213ca1af5b595e4578278",
            "file": "projects/sistema/src/app/shared/components/photo/photo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => PhotoComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "amb-photo",
            "styleUrls": [
                "./photo.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./photo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "photoByDefault",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'file'"
                        }
                    ]
                },
                {
                    "name": "isUsingWebcam",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "onTouched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "photo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'photo'"
                        }
                    ]
                },
                {
                    "name": "statusHover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "triggerSnapshot",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "changeOriginPhoto",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatSlideToggleChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatSlideToggleChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "executeLoadImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fileDropped",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "imageCapture",
                    "args": [
                        {
                            "name": "event",
                            "type": "WebcamImage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "WebcamImage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadPhotoFromUrlOrDataURL",
                    "args": [
                        {
                            "name": "dataUrlOrPatg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataUrlOrPatg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectImage",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "takePhoto",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "triggerAsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "val",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, forwardRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { WebcamImage } from 'ngx-webcam';\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { environment } from 'projects/sistema/src/environments/environment';\n\n@Component({\n  selector: 'amb-photo',\n  templateUrl: './photo.component.html',\n  styleUrls: ['./photo.component.css'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => PhotoComponent),\n      multi: true\n    }\n  ]\n})\nexport class PhotoComponent implements OnInit {\n\n  @ViewChild(\"photo\") photo: ElementRef;\n  @ViewChild(\"file\") file: ElementRef;\n  @Input() photoByDefault: string;\n  statusHover = false;\n  triggerSnapshot = new Subject<void>();\n  isUsingWebcam: boolean = false;\n  onChange: any;\n  onTouched: any;\n  value!: File;\n\n\n  constructor() { }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn\n  }\n\n  writeValue(val: File): void {\n    if (val) {\n      this.value = val;\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n  fileDropped(file: File) {\n    if (!file.type.startsWith('image/')) {\n      return;\n    }\n\n    this.onChange(file);\n    this.onTouched();\n\n    const fr: FileReader = new FileReader();\n    fr.readAsDataURL(file);\n    fr.onloadend = (response: any) => {\n      const dataBase64 = response.target.result;\n      this.loadPhotoFromUrlOrDataURL(dataBase64);\n    }\n\n  }\n\n  loadPhotoFromUrlOrDataURL(dataUrlOrPatg: string) {\n    this.photo.nativeElement.style.backgroundImage = 'url(' + dataUrlOrPatg + ')';\n  }\n\n  executeLoadImage() {\n    this.file.nativeElement.click();\n  }\n\n  selectImage(event: any) {\n    const file = event.target.files[0];\n    this.fileDropped(file)\n  }\n\n  triggerAsObservable(): Observable<void> {\n    return this.triggerSnapshot.asObservable();\n  }\n\n  takePhoto() {\n    this.triggerSnapshot.next();\n  }\n\n  imageCapture(event: WebcamImage) {\n    fetch(event.imageAsDataUrl)\n      .then((response) => response.arrayBuffer())\n      .then((buffer) => new File([buffer], 'image-profile', { type: \"image/jpeg\", }))\n      .then((file) => {\n        this.isUsingWebcam = false;\n        this.fileDropped(file);\n      })\n  }\n\n  changeOriginPhoto(event: MatSlideToggleChange) {\n    this.isUsingWebcam = !this.isUsingWebcam\n  }\n\n  ngAfterViewInit() {\n    if (this.photoByDefault) {\n      const path = `${environment.apiUrl}/photos/${this.photoByDefault}`\n      this.loadPhotoFromUrlOrDataURL(path);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    width: 100%;\r\n    height: 180px;\r\n    border: 1px solid #ccc;\r\n    cursor: pointer;\r\n    background-size: contain;\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n}\r\n\r\n.container.hover {\r\n    border: 1px dashed red;\r\n}\r\n\r\ninput[type=\"file\"] {\r\n    display: none;\r\n}",
                    "styleUrl": "./photo.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\" [ngClass]=\"{hover: statusHover}\" *ngIf=\"!isUsingWebcam\" upload (onHover)=\"statusHover = $event\"\n    (onFileDropped)=\"fileDropped($event)\" (click)=\"executeLoadImage()\" #photo></div>\n<webcam *ngIf=\"isUsingWebcam\" [height]=\"150\" [width]=\"140\" [trigger]=\"triggerAsObservable()\"\n    (imageCapture)=\"imageCapture($event)\" mirrorImage=\"never\"></webcam>\n<input type=\"file\" #file (change)=\"selectImage($event)\" />\n<div>\n    <mat-slide-toggle color=\"primary\" [checked]=\"isUsingWebcam\" (change)=\"changeOriginPhoto($event)\">Use Webcam\n    </mat-slide-toggle>\n    <button mat-icon-button color=\"primary\" type=\"button\" (click)=\"takePhoto()\" *ngIf=\"isUsingWebcam\">\n        <mat-icon>add_a_photo</mat-icon>\n    </button>\n</div>"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-27d7ff1033d7cc0c3631d3f23f7a78034741e76a9dc48da126ae83445fc709fc5d72a157f940de8fbdca5f7d4b730c1b72fc3cbc9d6eb8f26c2465914e5bae6e",
            "file": "projects/sistema/src/app/core/views/components/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-sidebar",
            "styleUrls": [
                "./sidebar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'amb-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.css']\n})\nexport class SidebarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sidebar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>sidebar works!</p>\n"
        },
        {
            "name": "SocketComponent",
            "id": "component-SocketComponent-d6426ffe01d81eddce24f922b5ba55ae14c57b72432ceac6dfb5ce1d8233bd879ae4836efe11598454fa3d4b159c363672646572a61ef69a8ad8bf896ed5a4c4",
            "file": "projects/sistema/src/app/dashboard/views/components/socket/socket.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-socket",
            "styleUrls": [
                "./socket.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./socket.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataVaccums",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Graph[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "doughnut",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "gradient",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "legend",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "legendPosition",
                    "defaultValue": "'Right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "legendTitle",
                    "defaultValue": "'Vaccums'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "scheme",
                    "defaultValue": "'natural'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "view",
                    "defaultValue": "[450, 350]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { SocketApplication } from '../../../application/socket.application';\nimport { Graph } from '../../../domain/graph.interface';\n\n@Component({\n  selector: 'amb-socket',\n  templateUrl: './socket.component.html',\n  styleUrls: ['./socket.component.css'],\n})\nexport class SocketComponent implements OnInit {\n  view: [number, number] = [450, 350];\n  scheme = 'natural';\n  legend = true;\n  legendPosition = 'Right';\n  legendTitle = 'Vaccums';\n  gradient = true;\n  doughnut = true;\n\n  dataVaccums: Graph[] = [];\n\n  constructor(private readonly socket: SocketApplication) { }\n\n  ngOnInit(): void {\n    this.socket.listen('dataupdate').subscribe((data: Graph[]) => {\n      this.dataVaccums = data;\n    });\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./socket.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "SocketApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "SocketApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ngx-charts-pie-chart [view]=\"view\" [scheme]=\"scheme\" [results]=\"dataVaccums\" [gradient]=\"gradient\" [legend]=\"legend\"\n    [legendTitle]=\"legendTitle\" [doughnut]=\"doughnut\"></ngx-charts-pie-chart>"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-9905d01ce4b22e99aea45a2886794524b018c06e6195da200abec3eabbdc010b0a23bde74812e2f459cbb209460a388c0eedcee2bc0dcdddc408bbfabc2e5b61",
            "file": "projects/sistema/src/app/shared/components/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-table",
            "styleUrls": [
                "./table.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataSource",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "metaColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "MetaColumn[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ColumnsDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<MatColumnDef>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MatColumnDef, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "listFields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTable<any>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatTable, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChildren, Input, OnInit, QueryList, SimpleChanges, ViewChild, ViewChildren } from '@angular/core';\nimport { MatColumnDef, MatTable } from '@angular/material/table';\nimport { MetaColumn } from '../../interfaces/metacolumn.interface';\n\n@Component({\n  selector: 'amb-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.css']\n})\nexport class TableComponent implements OnInit {\n\n  listFields: any[] = [];\n  @Input() dataSource: any = [];\n  @Input() metaColumns: MetaColumn[] = [];\n  @ContentChildren(MatColumnDef, { descendants: true }) ColumnsDef!: QueryList<MatColumnDef>//almacenando las columnas que se encuentren\n  @ViewChild(MatTable, { static: true }) table!: MatTable<any>//referencia al MatTable\n\n  constructor() { }\n\n  ngOnChanges(changes: SimpleChanges) {\n\n    if (changes[\"metaColumns\"]) {\n      this.listFields = this.metaColumns.map((el) => el.field)\n      console.log(this.listFields)\n    }\n\n  }\n\n  ngOnInit(): void {\n  }\n\n  selectRow(row: any) {\n    row[\"marked\"] = !row[\"marked\"];\n  }\n\n  ngAfterContentInit() {\n    if (!this.ColumnsDef) {\n      return\n    }\n\n    this.ColumnsDef.forEach((ColumnsDef) => {\n      this.listFields.push(ColumnsDef.name);\n      this.table.addColumnDef(ColumnsDef)\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.highline {\r\n    cursor: pointer;\r\n}\r\n\r\n.highlineMarked {\r\n    background-color: rgba(177, 178, 152, 0.707);\r\n}\r\n\r\n.highline:hover {\r\n    background-color: rgba(93, 251, 1, 0.333);\r\n}",
                    "styleUrl": "./table.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n    <ng-content></ng-content>\n    <table mat-table [dataSource]=\"dataSource\">\n        <ng-container [matColumnDef]=\"record.field\" *ngFor=\"let record of metaColumns\">\n            <th mat-header-cell *matHeaderCellDef>{{record.title}}</th>\n            <td mat-cell *matCellDef=\"let row\">{{row[record.field]}}</td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"listFields; sticky: true\"></tr>\n\n        <tr mat-row *matRowDef=\"let row; columns: listFields\" class=\"highline\"\n            [ngClass]=\"{highlineMarked: row['marked']}\" (click)=\"selectRow(row)\"></tr>\n    </table>\n</div>"
        },
        {
            "name": "TitleComponent",
            "id": "component-TitleComponent-853e97e45a48f672dc8cf53c2f5f06b0aaa988f9ce85c3a561958dc1e225c1343850485027347b9f357f1d975b18928b38e22677888d2f6d7495669e0a7e578a",
            "file": "projects/sistema/src/app/shared/components/title/title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-title",
            "styleUrls": [
                "./title.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "itemMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Menu, MenuService } from '../../service/menu.service';\n\n@Component({\n  selector: 'amb-title',\n  templateUrl: './title.component.html',\n  styleUrls: ['./title.component.css']\n})\nexport class TitleComponent implements OnInit {\n\n  itemMenu: Menu;\n\n  constructor(\n    private readonly activatedRoute: ActivatedRoute,\n    private readonly menuService: MenuService\n  ) {\n    const currentPath =\n      '/' + this.activatedRoute.snapshot.pathFromRoot[1].routeConfig?.path;\n    this.itemMenu = menuService.getDataPath(currentPath);\n  }\n\n  ngOnInit(): void {\n  }\n\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".toolbar {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 0 16px;\r\n    background-color: white;\r\n    border-bottom: 1px solid rgb(226, 232, 240);\r\n    height: 80px;\r\n}\r\n\r\n.info {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.info mat-icon {\r\n    font-size: 34px;\r\n    height: 34px;\r\n    width: 34px;\r\n}\r\n\r\n.info h2 {\r\n    font-size: 24px;\r\n    font-family: Inter;\r\n    color: rgb(30, 41, 59) !important;\r\n    line-height: 80px;\r\n    padding-left: 4px;\r\n}",
                    "styleUrl": "./title.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"toolbar\">\n    <div class=\"info\">\n        <mat-icon [svgIcon]=\"itemMenu.icon\"></mat-icon>\n        <h2>{{ itemMenu.title }}</h2>\n    </div>\n\n    <div class=\"action\">\n        <ng-content select=\"[btnAction]\"></ng-content>\n    </div>\n\n\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-4b64f24261ce52deec74cf9518f031653cbe8127120a29cd5d7ac0b2fa3dec5808d767031a0d6afbeacecf0c6d7d9a1edd62b562b2f364b98c26c6b44b51ccee",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app.routing.module';;\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { CoreModule } from './core/core.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { IconService } from './shared/service/icon.service';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatPaginatorIntl } from '@angular/material/paginator';\nimport { Paginator } from './shared/service/paginator.service';\nimport { LayoutModule } from './config/injections/layout/modules/layout.module';\nimport { layoutConstant } from './config/injections/layout/constants/layout.constant';\nimport { UserApplication } from './user/application/user.application';\nimport { UserInfrastructure } from './user/infrastructure/user.infrastructure';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AuthInfrastructure } from './core/infrastructure/auth.infrastructure';\nimport { AuthApplication } from './core/application/auth.application';\nimport { StorageApplication } from './core/application/storage.application';\nimport { StorageInfrastructure } from './core/infrastructure/storage.infrastructure';\nimport { MedicApplication } from './medic/application/medic.application';\nimport { MedicInfraestructure } from './medic/infrastructure/medic.infraestructure';\nimport { TokenInterceptor } from './shared/interceptors/token.interceptor';\nimport { DriverApplication } from './driver/application/driver.application';\nimport { DriverInfraestructure } from './driver/infrastructure/driver.infrastructure';\nimport { RoleApplication } from './roles/application/role.application';\nimport { RoleInfrastructure } from './roles/infrastructure/role.infrastructure';\n\n\nconst components = [AppComponent]\nconst imports = [BrowserModule, AppRoutingModule, HttpClientModule, CoreModule, BrowserAnimationsModule, MatSidenavModule, MatIconModule, LayoutModule.forRoot(layoutConstant), ReactiveFormsModule]\nconst material = [{ provide: MatPaginatorIntl, useClass: Paginator }]\nconst applications = [UserApplication, AuthApplication, StorageApplication, MedicApplication, DriverApplication, RoleApplication]\nconst infrastructures = [UserInfrastructure, AuthInfrastructure, StorageInfrastructure, MedicInfraestructure, DriverInfraestructure, RoleInfrastructure]\nconst interceptors = [{ provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true }]\n@NgModule({\n  declarations: [...components],\n  imports: [...imports],\n  bootstrap: [AppComponent],\n  providers: [...material, ...applications, ...infrastructures, ...interceptors]\n})\nexport class AppModule {\n  constructor(private readonly iconService: IconService) { }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthApplication"
                        },
                        {
                            "name": "AuthInfrastructure"
                        },
                        {
                            "name": "DriverApplication"
                        },
                        {
                            "name": "DriverInfraestructure"
                        },
                        {
                            "name": "MedicApplication"
                        },
                        {
                            "name": "MedicInfraestructure"
                        },
                        {
                            "name": "RoleApplication"
                        },
                        {
                            "name": "RoleInfrastructure"
                        },
                        {
                            "name": "StorageApplication"
                        },
                        {
                            "name": "StorageInfrastructure"
                        },
                        {
                            "name": "UserApplication"
                        },
                        {
                            "name": "UserInfrastructure"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-de55eb3e41424008ffd4d18af5a1e609a6e0c3bfdc7a48c98a709122874a746c297b4def2726bc1684ad05ec692b591defccc34ffd0053222e602df81b779162",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/app.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\nimport { PageLoginComponent } from \"./core/views/pages/page-login/page-login.component\";\r\nimport { AuthenticationGuard } from \"./shared/guards/authentication.guard\";\r\n\r\nconst routes: Routes = [\r\n    { path: '', component: PageLoginComponent },\r\n    {\r\n        path: 'user', loadChildren: () => \"import('./user/user.module').then(module => module.UserModule)\", canLoad: [AuthenticationGuard]\r\n    },\r\n    {\r\n        path: 'driver', loadChildren: () => \"import('./driver/driver.module').then(module => module.DriverModule)\", canLoad: [AuthenticationGuard]\r\n    },\r\n    {\r\n        path: 'medic', loadChildren: () => \"import('./medic/medic.module').then(module => module.MedicModule)\", canLoad: [AuthenticationGuard]\r\n    },\r\n    {\r\n        path: 'history', loadChildren: () => \"import('./history/history.module').then(module => module.HistoryModule)\", canLoad: [AuthenticationGuard]\r\n    },\r\n    {\r\n        path: 'dashboard', loadChildren: () => \"import('./dashboard/dashboard.module').then(module => module.DashboardModule)\", canLoad: [AuthenticationGuard]\r\n    }\r\n]\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule]\r\n})\r\n\r\nexport class AppRoutingModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-b4789fb92a6a242a34671b65a3d3c4251e81e1608397edd5e22a3f7a8e999c6c98ac118b850a81ce98f7e843080e1dc876692b85388199b73ec2080786af6e8a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HeaderComponent } from './views/components/header/header.component';\nimport { SidebarComponent } from './views/components/sidebar/sidebar.component';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MenuComponent } from './views/components/menu/menu.component';\nimport { MatListModule } from '@angular/material/list';\nimport { RouterModule } from '@angular/router';\nimport { PageLoginComponent } from './views/pages/page-login/page-login.component';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { LoginComponent } from './views/components/login/login.component';\nimport { MatFormField, MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { UtilsService } from '../shared/service/utils.service';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatDialogModule } from '@angular/material/dialog';\n\n\nconst components = [HeaderComponent, SidebarComponent, MenuComponent, PageLoginComponent, LoginComponent]\nconst imports = [CommonModule,\n  MatToolbarModule,\n  MatButtonModule,\n  MatIconModule,\n  MatMenuModule,\n  MatListModule,\n  MatFormFieldModule,\n  MatInputModule,\n  RouterModule,\n  FlexLayoutModule,\n  ReactiveFormsModule,\n  MatDialogModule,\n  MatSnackBarModule]\nconst exports = [HeaderComponent, SidebarComponent, MenuComponent]\n@NgModule({\n  declarations: [...components],\n  imports: [imports],\n  exports: [exports],\n  providers: [UtilsService],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class CoreModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "UtilsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "id": "module-DashboardModule-3767e0601add53051d6cf9a30c2088b197632c51695595f316b3a9bcd79ee261d77d18a92701313aa0d1a660074438236ad0c58478ca2b2927164d27f20613d4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/dashboard/dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DashboardRoutingModule } from './dashboard-routing.module';\nimport { DashboardComponent } from './views/pages/dashboard/dashboard.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\nimport { CovidComponent } from './views/components/covid/covid.component';\nimport { CovidApplication } from './application/covid.application';\nimport { CovidInfastructure } from './infrastructure/covid.infrastructure';\nimport { SocketComponent } from './views/components/socket/socket.component';\nimport { SocketApplication } from './application/socket.application';\nimport { SocketInfrastructure } from './infrastructure/socket.infrastructure';\n\n\n@NgModule({\n  declarations: [\n    DashboardComponent,\n    CovidComponent,\n    SocketComponent\n  ],\n  imports: [\n    CommonModule,\n    DashboardRoutingModule,\n    SharedModule,\n    NgxChartsModule\n  ],\n  providers: [CovidApplication, CovidInfastructure, SocketApplication, SocketInfrastructure]\n})\nexport class DashboardModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CovidApplication"
                        },
                        {
                            "name": "CovidInfastructure"
                        },
                        {
                            "name": "SocketApplication"
                        },
                        {
                            "name": "SocketInfrastructure"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CovidComponent"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "SocketComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DashboardRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardRoutingModule",
            "id": "module-DashboardRoutingModule-420a6d4fa91ca5c45176e3c756b79df7c9dec69887e267150023970122e9d50ae0993f234df8f6fd0ed4c577cc6bb096fb6c44a0ace07df8d0b1bb415385226c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/dashboard/dashboard-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DashboardComponent } from './views/pages/dashboard/dashboard.component';\n\nconst routes: Routes = [{ path: '', component: DashboardComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DashboardRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DriverModule",
            "id": "module-DriverModule-dd244b675c97d82ea15e4a9c5d2990254f613732ddf106346db541e7f9ca051aa3ce9f7735e1adbb9c248e2ecd0428acb71166b12eed9c180a6768f06bcd7070",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/driver/driver.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DriverRoutingModule } from './driver-routing.module';\nimport { PageListComponent } from './views/pages/page-list/page-list.component';\nimport { FormComponent } from './views/components/form/form.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [\n    PageListComponent,\n    FormComponent\n  ],\n  imports: [\n    CommonModule,\n    DriverRoutingModule,\n    SharedModule,\n    ReactiveFormsModule\n  ]\n})\nexport class DriverModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PageListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DriverRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DriverRoutingModule",
            "id": "module-DriverRoutingModule-343fa680c9499b955d7690406cb65272b15d1dc08cf53b928142c7004ff08ff90f5aa175f4e945a1c7384de1324e4ec1f66771ffdd48e4b29bc1567c1409b84f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/driver/driver-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PageListComponent } from './views/pages/page-list/page-list.component';\n\nconst routes: Routes = [\n  {\n    path: '', component: PageListComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DriverRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HistoryModule",
            "id": "module-HistoryModule-b564c6aa59af8ac4355a1da2b024876438b64c21e7e7c2235f9ead09e9334d9158f9ac853d0eb8ae9af6f0a246260f92866cdbf5d4e3e2d07750b194d560a218",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/history/history.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HistoryRoutingModule } from './history-routing.module';\nimport { PageListComponent } from './views/page/page-list/page-list.component';\nimport { FormComponent } from './views/components/form/form.component';\nimport { SharedModule } from '../shared/shared.module';\n\n\n@NgModule({\n  declarations: [\n    PageListComponent,\n    FormComponent\n  ],\n  imports: [\n    CommonModule,\n    HistoryRoutingModule,\n    SharedModule\n  ]\n})\nexport class HistoryModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HistoryRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HistoryRoutingModule",
            "id": "module-HistoryRoutingModule-b27dc31cb18eb963ae372f168a55a4008e5416410af675793ce0e1bd6e2c9e6bbb44b495ab5959ce1717853c553eb665b0c34c18e429d8952e49b1b9f6319fcb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/history/history-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PageListComponent } from './views/page/page-list/page-list.component';\n\nconst routes: Routes = [\n  {\n    path: '', component: PageListComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HistoryRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutModule",
            "id": "module-LayoutModule-6f014452f1460a538178bd64dfaa638f9587c035636cee174f7365d975f6fdedad50437a5499ed1ba2bd0a22ce881a87fd0202028a88350a2bcfd4721b2bb853",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/config/injections/layout/modules/layout.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "config",
                            "type": "ILayout",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<LayoutModule>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ILayout",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { ModuleWithProviders, NgModule } from \"@angular/core\";\r\nimport { ILayout } from \"../interface/layout.interface\";\r\nimport { LAYOUT_TOCKEN } from \"../tokens/layout.token\";\r\n\r\n@NgModule()\r\nexport class LayoutModule {\r\n    static forRoot(config: ILayout): ModuleWithProviders<LayoutModule> {\r\n        return {\r\n            ngModule: LayoutModule,\r\n            providers: [\r\n                { provide: LAYOUT_TOCKEN, useValue: config }\r\n            ]\r\n        }\r\n    }\r\n}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MedicModule",
            "id": "module-MedicModule-257a1580d991803235704dc8ecc725736b99729d524ad0596920db84d9c87f56f3248379243b348925d721bfcfdf6ea9866caa353fd8746e3717ae31d639b30e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/medic/medic.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MedicRoutingModule } from './medic-routing.module';\nimport { PageListComponent } from './views/pages/page-list/page-list.component';\nimport { FormComponent } from './views/components/form/form.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [\n    PageListComponent,\n    FormComponent\n  ],\n  imports: [\n    CommonModule,\n    MedicRoutingModule,\n    SharedModule,\n    ReactiveFormsModule,\n  ]\n})\nexport class MedicModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MedicRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MedicRoutingModule",
            "id": "module-MedicRoutingModule-ef1be75ab5d08c95a1c4c4e195177431926c6621851abdd84043c63479fa48cd14f4bdd44e5493b0b95ea51dd6b55435826c4039bb0116a5818186d36ad0738c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/medic/medic-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthenticationGuard } from '../shared/guards/authentication.guard'\nimport { PageListComponent } from './views/pages/page-list/page-list.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PageListComponent,\n    canActivate: [AuthenticationGuard]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class MedicRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-6480e7c469d13e197e9b6df28482727f208d6098456f69939f964b94932228462d3be82651d5d0e3e834748d406d7248e86a28cb38512475f49e3a29e1c26364",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TitleComponent } from './components/title/title.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTableModule } from '@angular/material/table';\nimport { ContainerComponent } from './components/container/container.component';\nimport { TableComponent, } from './components/table/table.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSidenavModule } from '@angular/material/sidenav';\n\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\nimport { PERFECT_SCROLLBAR_CONFIG } from 'ngx-perfect-scrollbar';\nimport { PerfectScrollbarConfigInterface } from 'ngx-perfect-scrollbar';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { PaginatorComponent } from './components/paginator/paginator.component';\nimport { UtilsService } from './service/utils.service';\nimport { ConfirmComponent } from './components/confirm/confirm.component';\nimport { PhotoComponent } from './components/photo/photo.component';\nimport { UploadDirective } from './directives/upload.directive';\nimport { WebcamModule } from 'ngx-webcam';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { KeypadComponent } from './components/keypad/keypad.component';\nimport { RolesAllowedDirective } from './directives/roles-allowed.directive';\n\n\n\n\nconst DEFAULT_PERFECT_SCROLLBAR_CONFIG: PerfectScrollbarConfigInterface = {\n  suppressScrollX: true\n};\n\n@NgModule({\n  declarations: [\n    TitleComponent,\n    ContainerComponent,\n    TableComponent,\n    PaginatorComponent,\n    ConfirmComponent,\n    PhotoComponent,\n    UploadDirective,\n    KeypadComponent,\n    RolesAllowedDirective,\n\n  ],\n  imports: [\n    CommonModule, MatIconModule, MatCardModule, MatTableModule, MatPaginatorModule, MatDialogModule, MatButtonModule, FlexLayoutModule, WebcamModule, MatSlideToggleModule, MatSnackBarModule\n  ],\n  exports: [TitleComponent, MatIconModule, MatButtonModule,\n    ContainerComponent, TableComponent, MatFormFieldModule,\n    MatInputModule, MatSidenavModule, PerfectScrollbarModule, PaginatorComponent, MatDialogModule,\n    MatToolbarModule, FlexLayoutModule, MatTableModule, PhotoComponent, KeypadComponent, RolesAllowedDirective\n  ],\n\n  providers: [\n    {\n      provide: PERFECT_SCROLLBAR_CONFIG,\n      useValue: DEFAULT_PERFECT_SCROLLBAR_CONFIG\n    },\n    UtilsService,\n  ]\n})\nexport class SharedModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "UtilsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfirmComponent"
                        },
                        {
                            "name": "ContainerComponent"
                        },
                        {
                            "name": "KeypadComponent"
                        },
                        {
                            "name": "PaginatorComponent"
                        },
                        {
                            "name": "PhotoComponent"
                        },
                        {
                            "name": "RolesAllowedDirective"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TitleComponent"
                        },
                        {
                            "name": "UploadDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ContainerComponent"
                        },
                        {
                            "name": "KeypadComponent"
                        },
                        {
                            "name": "PaginatorComponent"
                        },
                        {
                            "name": "PhotoComponent"
                        },
                        {
                            "name": "RolesAllowedDirective"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TitleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserModule",
            "id": "module-UserModule-4823e5f08eacc6c38e5d3494d61e9fd6f43af04d9b6ccfe5a94fcdf6ae705ef5cf46c84c7a07959999c67c2be87459a83e8706595f96e76757557b85cacc17c7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/user/user.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UserRoutingModule } from './user-routing.module';\nimport { PageListComponent } from './views/pages/page-list/page-list.component';\nimport { FormComponent } from './views/components/form/form.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { UserInfrastructure } from './infrastructure/user.infrastructure';\nimport { MatSelectModule } from '@angular/material/select';\n\n\nconst components = [PageListComponent, FormComponent]\nconst modules = [CommonModule, UserRoutingModule, SharedModule, ReactiveFormsModule, MatSelectModule]\nconst infrastructure = [UserInfrastructure]\n\n@NgModule({\n  declarations: [...components],\n  imports: [...modules],\n  providers: [...infrastructure]\n\n})\nexport class UserModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "UserInfrastructure"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "UserRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserRoutingModule",
            "id": "module-UserRoutingModule-78e53157845e836ec349141fc4392b0dcd36e76c63378b6bd4ffed401e83c8fb6327c50c6ac8d7cf044ad1dd2547e86bf925a489baf1f55b4130978be8a874e0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/user/user-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PageListComponent } from './views/pages/page-list/page-list.component';\n\nconst routes: Routes = [\n  {\n    path: '', component: PageListComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class UserRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "applications",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[UserApplication, AuthApplication, StorageApplication, MedicApplication, DriverApplication, RoleApplication]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[AppComponent]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/core/core.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[HeaderComponent, SidebarComponent, MenuComponent, PageLoginComponent, LoginComponent]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/user/user.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[PageListComponent, FormComponent]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PerfectScrollbarConfigInterface",
                "defaultValue": "{\n  suppressScrollX: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  apiUrl: 'https://api-cursoangular.cursos-dev.com',\n  pageSize: 5\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiUrl: 'https://api-cursoangular.cursos-dev.com',\n  pageSize: 5\n}"
            },
            {
                "name": "exports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/core/core.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[HeaderComponent, SidebarComponent, MenuComponent]"
            },
            {
                "name": "imports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[BrowserModule, AppRoutingModule, HttpClientModule, CoreModule, BrowserAnimationsModule, MatSidenavModule, MatIconModule, LayoutModule.forRoot(layoutConstant), ReactiveFormsModule]"
            },
            {
                "name": "imports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/core/core.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[CommonModule,\n  MatToolbarModule,\n  MatButtonModule,\n  MatIconModule,\n  MatMenuModule,\n  MatListModule,\n  MatFormFieldModule,\n  MatInputModule,\n  RouterModule,\n  FlexLayoutModule,\n  ReactiveFormsModule,\n  MatDialogModule,\n  MatSnackBarModule]"
            },
            {
                "name": "infrastructure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/user/user.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[UserInfrastructure]"
            },
            {
                "name": "infrastructures",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[UserInfrastructure, AuthInfrastructure, StorageInfrastructure, MedicInfraestructure, DriverInfraestructure, RoleInfrastructure]"
            },
            {
                "name": "interceptors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[{ provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true }]"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LAYOUT_TOCKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/config/injections/layout/tokens/layout.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken(\"layoutToken\")"
            },
            {
                "name": "layoutConstant",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/config/injections/layout/constants/layout.constant.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ILayout",
                "defaultValue": "{\r\n    hideHeader: false,\r\n    hideMenu: false\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "material",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[{ provide: MatPaginatorIntl, useClass: Paginator }]"
            },
            {
                "name": "MetaData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/user/user.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[CommonModule, UserRoutingModule, SharedModule, ReactiveFormsModule, MatSelectModule]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TableComponent>",
                "defaultValue": "(args: TableComponent) => ({\r\n    props: args,\r\n\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "AuthProperties",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/sistema/src/app/core/domain/auth.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "DriverProperties",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/sistema/src/app/driver/domain/driver.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "DriverUpdate",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<literal type>",
                "file": "projects/sistema/src/app/driver/domain/driver.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "MedicProperties",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/sistema/src/app/medic/domain/medic.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "MedicUpdate",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<literal type>",
                "file": "projects/sistema/src/app/medic/domain/medic.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "RoleProperties",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/sistema/src/app/roles/domain/role.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "RoleUpdate",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<literal type>",
                "file": "projects/sistema/src/app/roles/domain/role.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "UserProperties",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/sistema/src/app/user/domain/user.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "UserUpdate",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<literal type>",
                "file": "projects/sistema/src/app/user/domain/user.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [
            {
                "name": "TypeExport",
                "childs": [
                    {
                        "name": "EXCEL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "excel"
                    },
                    {
                        "name": "PDF",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pdf"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/sistema/src/app/shared/components/base/base-component.ts"
            }
        ],
        "groupedVariables": {
            "projects/sistema/src/app/app.module.ts": [
                {
                    "name": "applications",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[UserApplication, AuthApplication, StorageApplication, MedicApplication, DriverApplication, RoleApplication]"
                },
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[AppComponent]"
                },
                {
                    "name": "imports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[BrowserModule, AppRoutingModule, HttpClientModule, CoreModule, BrowserAnimationsModule, MatSidenavModule, MatIconModule, LayoutModule.forRoot(layoutConstant), ReactiveFormsModule]"
                },
                {
                    "name": "infrastructures",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[UserInfrastructure, AuthInfrastructure, StorageInfrastructure, MedicInfraestructure, DriverInfraestructure, RoleInfrastructure]"
                },
                {
                    "name": "interceptors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[{ provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true }]"
                },
                {
                    "name": "material",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[{ provide: MatPaginatorIntl, useClass: Paginator }]"
                }
            ],
            "projects/sistema/src/app/core/core.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/core/core.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[HeaderComponent, SidebarComponent, MenuComponent, PageLoginComponent, LoginComponent]"
                },
                {
                    "name": "exports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/core/core.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[HeaderComponent, SidebarComponent, MenuComponent]"
                },
                {
                    "name": "imports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/core/core.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[CommonModule,\n  MatToolbarModule,\n  MatButtonModule,\n  MatIconModule,\n  MatMenuModule,\n  MatListModule,\n  MatFormFieldModule,\n  MatInputModule,\n  RouterModule,\n  FlexLayoutModule,\n  ReactiveFormsModule,\n  MatDialogModule,\n  MatSnackBarModule]"
                }
            ],
            "projects/sistema/src/app/user/user.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/user/user.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[PageListComponent, FormComponent]"
                },
                {
                    "name": "infrastructure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/user/user.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[UserInfrastructure]"
                },
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/user/user.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[CommonModule, UserRoutingModule, SharedModule, ReactiveFormsModule, MatSelectModule]"
                }
            ],
            "projects/sistema/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/sistema/src/app/shared/shared.module.ts": [
                {
                    "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PerfectScrollbarConfigInterface",
                    "defaultValue": "{\n  suppressScrollX: true\n}"
                }
            ],
            "projects/sistema/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  apiUrl: 'https://api-cursoangular.cursos-dev.com',\n  pageSize: 5\n}"
                }
            ],
            "projects/sistema/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiUrl: 'https://api-cursoangular.cursos-dev.com',\n  pageSize: 5\n}"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "projects/sistema/src/app/config/injections/layout/tokens/layout.token.ts": [
                {
                    "name": "LAYOUT_TOCKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/config/injections/layout/tokens/layout.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken(\"layoutToken\")"
                }
            ],
            "projects/sistema/src/app/config/injections/layout/constants/layout.constant.ts": [
                {
                    "name": "layoutConstant",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/config/injections/layout/constants/layout.constant.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILayout",
                    "defaultValue": "{\r\n    hideHeader: false,\r\n    hideMenu: false\r\n}"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "stories/table.stories.ts": [
                {
                    "name": "MetaData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TableComponent>",
                    "defaultValue": "(args: TableComponent) => ({\r\n    props: args,\r\n\r\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/sistema/src/app/shared/components/base/base-component.ts": [
                {
                    "name": "TypeExport",
                    "childs": [
                        {
                            "name": "EXCEL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "excel"
                        },
                        {
                            "name": "PDF",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pdf"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/sistema/src/app/shared/components/base/base-component.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/sistema/src/app/core/domain/auth.ts": [
                {
                    "name": "AuthProperties",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/sistema/src/app/core/domain/auth.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "projects/sistema/src/app/driver/domain/driver.ts": [
                {
                    "name": "DriverProperties",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/sistema/src/app/driver/domain/driver.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "DriverUpdate",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<literal type>",
                    "file": "projects/sistema/src/app/driver/domain/driver.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/sistema/src/app/medic/domain/medic.ts": [
                {
                    "name": "MedicProperties",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/sistema/src/app/medic/domain/medic.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "MedicUpdate",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<literal type>",
                    "file": "projects/sistema/src/app/medic/domain/medic.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/sistema/src/app/roles/domain/role.ts": [
                {
                    "name": "RoleProperties",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/sistema/src/app/roles/domain/role.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "RoleUpdate",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<literal type>",
                    "file": "projects/sistema/src/app/roles/domain/role.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/sistema/src/app/user/domain/user.ts": [
                {
                    "name": "UserProperties",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/sistema/src/app/user/domain/user.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "UserUpdate",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<literal type>",
                    "file": "projects/sistema/src/app/user/domain/user.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/sistema/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applications",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "imports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "infrastructures",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "interceptors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "material",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/config/injections/layout/constants/layout.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "layoutConstant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/config/injections/layout/interface/layout.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILayout",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/config/injections/layout/services/layoutservice.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LayoutService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/config/injections/layout/tokens/layout.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LAYOUT_TOCKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/application/auth.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthApplication",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/application/storage.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageApplication",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/core.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/core.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/core.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "imports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/domain/auth.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthFactory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/domain/auth.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthRepository",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/domain/auth.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Auth",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/domain/auth.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthOptional",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/domain/auth.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthRequired",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/domain/storage.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StorageRepository",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/domain/tokens.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITokens",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/infrastructure/auth.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/infrastructure/storage.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/views/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/views/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/views/components/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/views/components/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/views/pages/page-login/page-login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageLoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/application/covid.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CovidApplication",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/application/socket.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SocketApplication",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/domain/covid.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CovidModel",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/domain/covid.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CovidRepository",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/domain/graph.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Graph",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/domain/socket.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SocketRepository",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/infrastructure/covid.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CovidInfastructure",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/infrastructure/socket.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SocketInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/views/components/covid/covid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CovidComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/views/components/socket/socket.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SocketComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/views/pages/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/application/driver.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DriverApplication",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/application/driver.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMedicApplication",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/domain/driver.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DriverFactory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/domain/driver.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DriverRepository",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/domain/driver.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Driver",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/domain/driver.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DriverOpcional",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/domain/driver.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DriverRequired",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/infrastructure/driver.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DriverInfraestructure",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/views/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/views/pages/page-list/page-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/history/views/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/history/views/page/page-list/page-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/application/medic.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MedicApplication",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/application/medic.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMedicApplication",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/domain/medic.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MedicFactory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/domain/medic.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MedicRepository",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/domain/medic.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Medic",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/domain/medic.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MedicOpcional",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/domain/medic.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MedicRequired",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/infrastructure/medic.infraestructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MedicInfraestructure",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/views/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/views/pages/page-list/page-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/roles/application/role.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RoleApplication",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/roles/application/role.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRole",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/roles/domain/role.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RoleFactory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/roles/domain/role.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RoleRepository",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/roles/domain/role.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Role",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/roles/domain/role.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RoleEssential",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/roles/domain/role.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RoleOptional",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/roles/infrastructure/role.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RoleInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/application/base.application.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseApplication",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/application/interface-application.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IApplication",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/components/base/base-component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/components/confirm/confirm.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/components/container/container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/components/keypad/keypad.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KeypadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/components/paginator/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/components/photo/photo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PhotoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/components/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/components/title/title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/directives/roles-allowed.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RolesAllowedDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/directives/upload.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "UploadDirective",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/domain/base.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/guards/authentication.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthenticationGuard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/infrastructure/base-infrastructure.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseInfraestructure",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/interceptors/token.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "TokenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/interface/result-page.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IResultPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/interfaces/metacolumn.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetaColumn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/service/icon.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IconService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/service/icon.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/service/menu.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MenuService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/service/menu.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Menu",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/service/paginator.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "Paginator",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/service/utils.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UtilsService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/application/user.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserApplication",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/domain/user-factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserFactory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/domain/user.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserRepository",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/domain/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/domain/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserOpcional",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/domain/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserRequired",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/infrastructure/user.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/user.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/user.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "infrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/user.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/views/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/views/pages/page-list/page-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MetaData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}